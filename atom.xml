<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>斯人若彩虹</title>
    <subtitle></subtitle>
    <icon>http://example.com/images/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>Rainbow Sea</name>
    </author>
    <updated>2022-11-30T16:00:00.000Z</updated>
    <entry>
        <id>http://example.com/2022/12/01/c#/c#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
        <title>c#基础</title>
        <link rel="alternate" href="http://example.com/2022/12/01/c#/c#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
        <content type="html">&lt;h2 id=&#34;1数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1数据类型&#34;&gt;#&lt;/a&gt; 1. 数据类型&lt;/h2&gt;
&lt;h3 id=&#34;11-值类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-值类型&#34;&gt;#&lt;/a&gt; 1.1 值类型&lt;/h3&gt;
&lt;p&gt;​	看值类型之前，了解到 c# 中的八种整数类型，分别是 &lt;code&gt;sbyte，byte，short，ushort，int，uint，long，ulong&lt;/code&gt; ，基类库为 &lt;code&gt;System.Int&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212011741218.png&#34; alt=&#34;image-20221201172545156&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-浮点类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-浮点类型&#34;&gt;#&lt;/a&gt; 1.2 浮点类型&lt;/h3&gt;
&lt;p&gt;​	浮点数的精度由有效数位的个数决定的，从 &lt;code&gt;.Net Core 3.0&lt;/code&gt;  开始， &lt;code&gt;double&lt;/code&gt; （双精度）型浮点可以表示的有效数数子最多为 &lt;code&gt;17&lt;/code&gt;  位， &lt;code&gt;float&lt;/code&gt;  型为最多九位（有一个前提，是该浮点数不是由字符串转换得来的），浮点数类型采用二进制浮点数来存储数值，这种方法会在小数部分产生舍入的误差问题，所以在实际的运算之中，用十进制和二进制所表示的实数都存在舍入的误差问题，作为对比， &lt;code&gt;c#&lt;/code&gt; 的 &lt;code&gt;decimal&lt;/code&gt;  类型在其所允许的进度范围之内不会有误差的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212011751475.png&#34; alt=&#34;image-20221201175117417&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;13-decimal类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-decimal类型&#34;&gt;#&lt;/a&gt; 1.3 decimal 类型&lt;/h3&gt;
&lt;p&gt;​	 &lt;code&gt;c#&lt;/code&gt; 提供了 128 位精度的十进制浮点类型，它适合大而精确的计算，适用于金融的计算，decimal 类型保证范围内所有十进制数都是精确的，即 0.1 就是 0.1，而不是近似值，虽然精度高，但是范围小，是在一个可控制的范围，所以就会出现浮点数类型转换位 decimal 类型发生溢出的错误&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212011759514.png&#34; alt=&#34;image-20221201175941461&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;14-布尔类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-布尔类型&#34;&gt;#&lt;/a&gt; 1.4 布尔类型&lt;/h3&gt;
&lt;p&gt;​	c# 的第四个基元类型是 &lt;code&gt;布尔类型&lt;/code&gt; （Boolen），允许的值包括关键字 true 和 false 其基类为 &lt;code&gt;System.Boolen&lt;/code&gt; ，理论上一个二进制位足以容纳一个布尔类型的值，但 bool 实际上的大小为一个字节&lt;/p&gt;
&lt;h3 id=&#34;15-字符类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-字符类型&#34;&gt;#&lt;/a&gt; 1.5 字符类型&lt;/h3&gt;
&lt;p&gt;​	字符类型 char 表示 16 位字符，取值的范围对应于 Unicode 字符集，从技术上说，char 的大小和 16 位无符号整型（ushort）相同，但是 char 是 c# 的特有类型，要单独的对待。char 类型的基类为 &lt;code&gt;System.Char&lt;/code&gt; ，有的字符不可以直接插入源代码，需要再进行特殊处理，首先输入反斜杠（\）前缀，再加上特殊的字符代码。反斜杠加上特殊字符代码统称为转义序列。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212012021093.png&#34; alt=&#34;image-20221201202144047&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212012025693.png&#34; alt=&#34;image-20221201202524650&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;16-字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-字符串&#34;&gt;#&lt;/a&gt; 1.6 字符串&lt;/h3&gt;
&lt;p&gt;​	零或者是多个字符的有限序列称为字符串，c# 的字符串是 string 类型，基类为 &lt;code&gt;System.String&lt;/code&gt; ，string 是一种不可变类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#### 1.61 字面值
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	字面值字符串输入代码，需要将文本放入到双引号中（&amp;quot;Hello，World&amp;quot;），c# 允许在字符串前使用 @符号，指明转义序列不被处理，结果是一个 &lt;code&gt;逐字字符串字面值&lt;/code&gt; ，它会将反斜杠当做普通的字符，还会逐字解释所有的空白字符&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;//在Unity中也是遵守这个条件的 
void Start()
&amp;#123;
    //在双引号之前加上@，就可以将字符串原样输出，转移字符将不处理
    string str = @&amp;quot;\n\t$%^&amp;amp;*(((((**&amp;amp;^&amp;amp;^^^ &amp;quot;;
    Debug.Log(str);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021543031.png&#34; alt=&#34;image-20221202154355989&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	假如同一个字符串字面值在程序集中多次出现，编译器在程序集中只定义字符串一次，且所有变量都指向它，如此，假如在代码中多次插入包含大量字符的同一个字符串字面值，最终的程序集只反映其中一个的大小。要想链接字符串就需要用 &lt;code&gt;+&lt;/code&gt;  号操作符。&lt;/p&gt;
&lt;h4 id=&#34;162-字符串插值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#162-字符串插值&#34;&gt;#&lt;/a&gt; 1.62 字符串插值&lt;/h4&gt;
&lt;p&gt;​	字符串可以用插值技术嵌入表达式，语法就是在字符串前添加 $ 符号，并在字符中用一对大括号嵌入表达式，如下所示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;void Start()
&amp;#123;
    string name = &amp;quot;rainbow&amp;quot;;
    int age = 15;
    string sex = &amp;quot;女&amp;quot;;
    //使用$来实现字符串的格式化
    string desc = $&amp;quot;我是&amp;#123;name&amp;#125;,今年&amp;#123;age&amp;#125;岁了,我是&amp;#123;sex&amp;#125;孩子喔！&amp;quot;;
    Debug.Log(desc);
&amp;#125;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021542843.png&#34; alt=&#34;image-20221202154242787&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	而且，逐字和插值可组合使用，但是要先指定 $，再指定 @，适用场景为字符串太长，需要字符逐字输出，那么就可以做到，稍微修改一下代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;void Start()
&amp;#123;
    string name = &amp;quot;rainbow&amp;quot;;
    int age = 15;
    string sex = &amp;quot;女&amp;quot;;
    //使用$来实现字符串的格式化,加上@逐字输出
    string desc = $@&amp;quot;我是&amp;#123;name&amp;#125;,今年&amp;#123;age&amp;#125;岁了,
               ** **
             **  *  **
            ***     ***
             **     **
              **   **
                ***
            我是&amp;#123;sex&amp;#125;孩子喔！&amp;quot;;
    Debug.Log(desc);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021550918.png&#34; alt=&#34;image-20221202155058869&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	字符串插值的内部工作原理就是调用了 &lt;code&gt;string.Format()&lt;/code&gt;  方法的 &lt;code&gt;语法糖&lt;/code&gt; ，如下面代码所示，两个的效果是一模一样的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;void Start()
&amp;#123;
    string name = &amp;quot;rainbow&amp;quot;;
    int age = 15;
    string sex = &amp;quot;女&amp;quot;;
    //$语法糖其实是调用了string.Format()
    object[] args = new object[] &amp;#123;name, age, sex&amp;#125;;
    string desc = string.Format(&amp;quot;我是&amp;#123;0&amp;#125;,今年&amp;#123;1&amp;#125;岁了, 我是&amp;#123;2&amp;#125;孩	  子喔！&amp;quot;, args);
    Debug.Log(desc);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021558657.png&#34; alt=&#34;image-20221202155809612&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;163-字符串方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#163-字符串方法&#34;&gt;#&lt;/a&gt; 1.63 字符串方法&lt;/h4&gt;
&lt;p&gt;​	string 类型也提供了几个方法来格式化，链接和比较字符串，具体的可以查看下面的 Api 以及示例，有了字符串插值的时候， &lt;code&gt;string.Format()&lt;/code&gt;  就用的比较少了，但是在幕后，编译成 CIL 后都转换为调用 &lt;code&gt;string.Concat()&lt;/code&gt;  和 &lt;code&gt;string.Foramat()&lt;/code&gt;  来处理字符串的字面值。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021602109.png&#34; alt=&#34;image-20221202160209036&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	上表列出的都是静态方法，这意味着为了调用方法，需要在方法名之前附加方法所在的类型，（实例方法调用就不以类型名作为前缀了，而是以变量名字，或者对实例的其他引用）作为前缀。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021607155.png&#34; alt=&#34;image-20221202160753103&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021608944.png&#34; alt=&#34;image-20221202160811881&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高级主题：using 和 using static 指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	之前调用静态方法需要附加命名空间和类型名前缀， &lt;code&gt;using static&lt;/code&gt;  指令添加到文件顶部，每次使用程序集的方法时候，直接使用其中命名的方法即可， &lt;code&gt;using static只支持静态方法或者属性，不支持实例方法&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;​	using 是直接忽略掉命名空间前缀，使用 &lt;code&gt;using&lt;/code&gt;  指令时，不管是在实例化时，还是在调用静态方法时，还是在 c#6.0 新增的 nameof 操作符的时候，都可以省略对命名空间的引用，因为 &lt;code&gt;using作用于整个文件或者是命名空间中&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;164-字符串格式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#164-字符串格式化&#34;&gt;#&lt;/a&gt; 1.64 字符串格式化&lt;/h4&gt;
&lt;p&gt;​	要在插值或者格式化的字符串中添加实际的左右大括号可以连写两个大括号表示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;void Start()
&amp;#123;
    string name = &amp;quot;rainbow&amp;quot;;
    int age = 15;
    string sex = &amp;quot;女&amp;quot;;
    //使用$来实现字符串的格式化
    object[] args = new object[] &amp;#123;name, age, sex&amp;#125;;
    string desc = string.Format(&amp;quot;我是&amp;#123;&amp;#123;&amp;#123;0&amp;#125;&amp;#125;&amp;#125;,今年&amp;#123;&amp;#123;&amp;#123;1&amp;#125;&amp;#125;&amp;#125;岁了, 	我是&amp;#123;&amp;#123;&amp;#123;2&amp;#125;&amp;#125;&amp;#125;孩子喔！&amp;quot;, args);
    Debug.Log(desc);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021622139.png&#34; alt=&#34;image-20221202162202092&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;165-换行符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#165-换行符&#34;&gt;#&lt;/a&gt; 1.65 换行符&lt;/h4&gt;
&lt;p&gt;​	跨平台的话要依赖 &lt;code&gt;System.WriteLine()&lt;/code&gt;  和 &lt;code&gt;System.Environment.NewLine&lt;/code&gt;  而不是 &lt;code&gt;\n&lt;/code&gt;  来确保跨平台兼容.&lt;/p&gt;
&lt;h4 id=&#34;166-字符串长度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#166-字符串长度&#34;&gt;#&lt;/a&gt; 1.66 字符串长度&lt;/h4&gt;
&lt;p&gt;​	判断字符串长度可以使用 &lt;code&gt;string&lt;/code&gt;  的 &lt;code&gt;Length&lt;/code&gt;  成员（或者叫 &lt;code&gt;字段&lt;/code&gt; ），该成员是 &lt;code&gt;只读属性&lt;/code&gt; ，不能设置，调用时也不需要任何的参数，如下面代码所示，字符串的长度不能直接设置，因为字符串的长度是更具字符数计算出来的，而且字符串是不可变的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;void Start()
&amp;#123;
 	string str = &amp;quot;rainbow_ovo&amp;quot;;
    Debug.Log($&amp;quot;The str`s length is &amp;#123;str.Length&amp;#125;&amp;quot;);   
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021636245.png&#34; alt=&#34;image-20221202163627208&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;167-字符串长度不可变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#167-字符串长度不可变&#34;&gt;#&lt;/a&gt; 1.67 字符串长度不可变&lt;/h4&gt;
&lt;p&gt;​	string 类型由于性能的问题，一旦定义就无法更改，只能新开辟空间，而且旧的字符串也不可以更改，即使使用 &lt;code&gt;text.ToUpper()&lt;/code&gt;  也只是返回一个新的字符串而已，用一个新的变量保存，原来的字符串还在，在内存中并没有改变。&lt;/p&gt;
&lt;p&gt;​	如果要大量修改字符串，就可以考虑使用 &lt;code&gt;System.Text.StringBuilder&lt;/code&gt;  类型，而不是 &lt;code&gt;string&lt;/code&gt;  类型，因为 &lt;code&gt;StringBuilder&lt;/code&gt;  的实例方法会修改 &lt;code&gt;StringBuilder本身的数据，不返回新的字符串&lt;/code&gt; ，也就不会有多余的内存占用。&lt;/p&gt;
</content>
        <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2022-11-30T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
        <title>TypeScript基础数据类型</title>
        <link rel="alternate" href="http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
        <content type="html">&lt;h2 id=&#34;typescript-基础数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typescript-基础数据类型&#34;&gt;#&lt;/a&gt; TypeScript 基础数据类型&lt;/h2&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 基本变量赋值模板&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//var [变量名] : [类型] = 值；&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; value ：&lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Hello TypeScript&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;h3 id=&#34;11-any-类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-any-类型&#34;&gt;#&lt;/a&gt; 1.1 	any 类型&lt;/h3&gt;
&lt;p&gt;声明 any 类型的变量可以赋值任何类型的值，目的是不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查；来获取不清楚具体的变量类型&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; val&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; val&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; val&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; val&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;12boolean-布尔类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12boolean-布尔类型&#34;&gt;#&lt;/a&gt; 1.2	boolean 布尔类型&lt;/h3&gt;
&lt;p&gt;就是和其他变成语言一样的 true 和 false&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; isOpen &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; isOff &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;13number-数字类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13number-数字类型&#34;&gt;#&lt;/a&gt; 1.3	number  数字类型&lt;/h3&gt;
&lt;p&gt;双精度 64 位浮点数，可以用来表示分数和整数，这里有别于其他的地方，有点类似于 Lua，除了支持十进制和十六进制，还支持二进制和八进制字面量&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; binaryLiteral &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0b1010&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;// 二进制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; octallLiteral &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0o744&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;// 八进制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; decLiteral &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		    &lt;span class=&#34;token comment&#34;&gt;// 十进制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; hexLiteral &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xf00d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;// 十六进制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;14string-字符串类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14string-字符串类型&#34;&gt;#&lt;/a&gt; 1.4	string 字符串类型&lt;/h3&gt;
&lt;p&gt;使用单引号（ &#39; &#39; ）或者双引号（ &amp;quot;&amp;quot; ）来表示字符串类型；反引号（` ）来定义多行文本和内嵌表达式 （ $ {expr}）&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;TS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; power &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;NB&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;I am &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;name&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;, I am &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;age&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt; years old!&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;15-数组类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-数组类型&#34;&gt;#&lt;/a&gt; 1.5	[ ]  数组类型&lt;/h3&gt;
&lt;p&gt;一种是定义类型的数组，还有一种是泛型数组&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; list &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; list &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;16tuple-元祖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16tuple-元祖&#34;&gt;#&lt;/a&gt; 1.6	Tuple  元祖&lt;/h3&gt;
&lt;p&gt;定义的数组元素不一定是同一类的，就类似于 lua 中的 &lt;code&gt;table&lt;/code&gt;  一样，是一个混合型数组，还有一个联合类型，这个后面记录&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 有两种定义元组的方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//（1）提前规定好数据类型，然后赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//let list : [string, number, boolean];&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//list = [&#34;TS&#34;, 10, true];&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//（2）直接赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//let list = [&#34;TS&#34;, 10, true];&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;TS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; index &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt;  TS string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt;  10 number&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt;  true boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;17enum-枚举类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17enum-枚举类型&#34;&gt;#&lt;/a&gt; 1.7	enum 枚举类型&lt;/h3&gt;
&lt;p&gt;枚举可以为数字赋予一个名字，方便明白数字的含义代表什么，默认是从 &lt;code&gt;0&lt;/code&gt;  开始，但是也可以自己定义，&lt;strong&gt;没有自己定义值，那么下一个值是上一个值加一&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;enum&lt;/span&gt; Color &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        red &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        green&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        blue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        black&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; color_red &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Color &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Color&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; color_green &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Color &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Color&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;green&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; color_blue &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Color &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Color&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;blue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; color_black &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Color &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Color&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;black&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;color_red&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;color_green&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;color_blue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;color_black&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt; 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt; 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt; 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;18void类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18void类型&#34;&gt;#&lt;/a&gt; 1.8	void 类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt;  类型一般用于方法（函数）有没有返回值，没有返回值则定义成  &lt;code&gt;void&lt;/code&gt; ，如果用 void 定义变量的话，就只能赋值 &lt;code&gt;undefined&lt;/code&gt;  和 &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//lambda 表示（匿名函数）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;TS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 规定是否有返回值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Func1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;TS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 类似于 lua 的 function，里面可以写返回值，也可以不写&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Func2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;TS&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Func1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Func2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;19null-和-undefined类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19null-和-undefined类型&#34;&gt;#&lt;/a&gt; 1.9	Null 和 Undefined 类型&lt;/h3&gt;
&lt;p&gt;是所有类型的的子类，意味着，可以赋值给所有类型，包括他们自身，指定了 &lt;code&gt;--strictNullChecks&lt;/code&gt;  标记， &lt;code&gt;null&lt;/code&gt;  和 &lt;code&gt;undefined&lt;/code&gt;  只能赋值给 &lt;code&gt;void&lt;/code&gt;  和它们各自，这样就避免有时候需要的数据没有定义导致编译运行出错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注意：我们鼓励尽可能地使用--strictNullChecks
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;110never类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#110never类型&#34;&gt;#&lt;/a&gt; 1.10	Never 类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;never&lt;/code&gt;  类型表示的是那些永不存在的值的类型。 例如，  &lt;code&gt;never&lt;/code&gt;  类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是  &lt;code&gt;never&lt;/code&gt;  类型，当它们被永不为真的类型保护所约束时。 &lt;code&gt;never&lt;/code&gt;  类型是任何类型的子类型，也可以赋值给任何类型；然而，&lt;em&gt;没有&lt;/em&gt;类型是 &lt;code&gt;never&lt;/code&gt;  的子类型或可以赋值给 &lt;code&gt;never&lt;/code&gt;  类型（除了 &lt;code&gt;never&lt;/code&gt;  本身之外）。 即使  &lt;code&gt;any&lt;/code&gt;  也不可以赋值给 &lt;code&gt;never&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 无限循环，因为定义为 never 了，就不存在条件为假的情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;infiniteLoop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;never&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;111类型断言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111类型断言&#34;&gt;#&lt;/a&gt; 1.11	类型断言&lt;/h3&gt;
&lt;p&gt;通过&lt;em&gt;类型断言&lt;/em&gt;这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构； 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查（说人话就是，告诉编译器，它就是我定义的类型，就是强制让它成为我想要的类型，使编译不出错）&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 尖括号法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; someValue&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;this is a string&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; strLength&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;someValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//as 法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; someValue&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;this is a string&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; strLength&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;someValue &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2022-07-18T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/07/19/LayaAir/%E6%90%AD%E5%BB%BALayeAirBox%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BC%96%E8%AF%91%E7%A4%BA%E4%BE%8B/</id>
        <title>搭建LayeAirBox开发环境及编译示例</title>
        <link rel="alternate" href="http://example.com/2022/07/19/LayaAir/%E6%90%AD%E5%BB%BALayeAirBox%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BC%96%E8%AF%91%E7%A4%BA%E4%BE%8B/"/>
        <content type="html">&lt;h2 id=&#34;一-搭建layeairbox开发环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-搭建layeairbox开发环境&#34;&gt;#&lt;/a&gt; 一、搭建 LayeAirBox 开发环境&lt;/h2&gt;
&lt;h3 id=&#34;11-安装nodejs环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-安装nodejs环境&#34;&gt;#&lt;/a&gt; 1.1 	安装 Node.js 环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;win7 的系统，那么最高支持的 node.js 的版本是 13.14 及以下的版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;win10 系统，下最新版的 (LTS 版的最好) 版本就行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-安装命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-安装命令&#34;&gt;#&lt;/a&gt; 1.2 	安装命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;检查是不是安装过 node.js 了，如果安装了，出现了 npm 的命令说明，版本号和安装路径，那就跳过这一步&lt;/li&gt;
&lt;li&gt;没安装，贴上地址 https://nodejs.org/en/，安装完之后再使用下面的命令来检查是否安装成功&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm &lt;span class=&#34;token function&#34;&gt;-&lt;/span&gt;h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/8nKCG9q6Vxd5zPg.png&#34; alt=&#34;image-20220719104519551&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;13npm命令来安装typescript环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13npm命令来安装typescript环境&#34;&gt;#&lt;/a&gt; 1.3	npm 命令来安装 TypeScript 环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在命令行输入下面指令，按回车键，即可下载并安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm install &lt;span class=&#34;token function&#34;&gt;-&lt;/span&gt;g typescript&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;如果遇到和下图相似的错误，那就执行一下缓存清理命令（我没出现过）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/pKIBQmkde5CzbvS.png&#34; alt=&#34;image-20220719153348983&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm cache clean &lt;span class=&#34;token function&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;-&lt;/span&gt;force&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;安装成功以后使用下面命令，如果出现类似下图的 TypeScript 的版本信息表示安装完成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tsc &lt;span class=&#34;token function&#34;&gt;-&lt;/span&gt;v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/ubnX4cOMlhNSz6T.png&#34; alt=&#34;image-20220719153705149&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;二-layaair示例项目源码编译运行指南&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-layaair示例项目源码编译运行指南&#34;&gt;#&lt;/a&gt; 二、LayaAir 示例项目源码编译运行指南&lt;/h2&gt;
&lt;h3 id=&#34;21安装git环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21安装git环境&#34;&gt;#&lt;/a&gt; 2.1	安装 git 环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;度娘搜一下安装教程（这里就不再赘述了）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22克隆layaair源码项目到本地&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22克隆layaair源码项目到本地&#34;&gt;#&lt;/a&gt; 2.2	克隆 LayaAir 源码项目到本地&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在自己想要放的盘符建一个空文件夹（绝对路径不要包含中文）&lt;/li&gt;
&lt;li&gt;然后在你创建的目录下面右键，如下图打开命令行输入下面命令，就可以下载了（不过比较的慢，国内嘛）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;git clone https&lt;span class=&#34;token dfn builtin&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token monadic-operator operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token monadic-operator operator&#34;&gt;/&lt;/span&gt;github&lt;span class=&#34;token dyadic-operator operator&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;token monadic-operator operator&#34;&gt;/&lt;/span&gt;layabox&lt;span class=&#34;token monadic-operator operator&#34;&gt;/&lt;/span&gt;LayaAir&lt;span class=&#34;token dyadic-operator operator&#34;&gt;.&lt;/span&gt;git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/hcKnN5ZGF98RPkJ.png&#34; alt=&#34;image-20220719154624180&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;23安装源码依赖包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23安装源码依赖包&#34;&gt;#&lt;/a&gt; 2.3	安装源码依赖包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在刚才拉完源码的目录下打开命令行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/MR5hSlb74ftGgDs.png&#34; alt=&#34;image-20220719154909858&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后在命令行中输入下面的命令，如果有警告，可以忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm install&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;24运行layaair引擎示例代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24运行layaair引擎示例代码&#34;&gt;#&lt;/a&gt; 2.4	运行 LayaAir 引擎示例代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;官方文档里面用 vscode 打开后，运行&lt;strong&gt; Ctrl + Shift + B&lt;/strong&gt;，然后如下图，所示，先构建配置文件，然后在编译源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/Lbdxs6uPqpMk38y.png&#34; alt=&#34;image-20220719155421094&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在点了第二步之后，报错 gulp 不是内部命令，和 2.3 安装依赖包的操作一样，输入下面命令，这样这个命令就添加了（如果还是报错，再执行一下，第二句命令）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm install &lt;span class=&#34;token function&#34;&gt;-&lt;/span&gt;g gulp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm install&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;如果上两步都 OK 了，然后在 vscode 中 F5 运行，当走到要执行 anywhere 时报错，那么就是因为没有安装 anywhere 依赖，2.3 安装依赖包的操作一样输入下面命令，安装完之后再编译一遍，那么浏览器就会出现下面的页面，打开 indexTSC.html 就可以看到示例项目了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/kpS9iRLXt3f62cH.png&#34; alt=&#34;image-20220719160502902&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight apl&#34;&gt;&lt;figcaption data-lang=&#34;APL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm install &lt;span class=&#34;token function&#34;&gt;-&lt;/span&gt;g anywhere&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/vJyIebANMPGYaKB.png&#34; alt=&#34;image-20220719160401070&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/07/19/s8zqatbkGJ2SOLh.png&#34; alt=&#34;image-20220719160603343&#34; /&gt;&lt;/p&gt;
</content>
        <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2022-07-18T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
        <title>TypeScript基础语法</title>
        <link rel="alternate" href="http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
        <content type="html">&lt;h2 id=&#34;typescript-基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typescript-基础语法&#34;&gt;#&lt;/a&gt; TypeScript 基础语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TS（TypeScript 的简称，以下的文章都是用缩写）程序由 5 个部分组成：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;模块&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;li&gt;语句表达式&lt;/li&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;11-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-类&#34;&gt;#&lt;/a&gt; 1.1 	类&lt;/h3&gt;
&lt;p&gt;类是一个模板，它描述一类对象的行为和状态，如果学习过 c# 的同学应该理解起来比较的熟悉&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Fun&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//name：方法名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// :void 无返回值方法（这一部分，当看完 TS 中的基本数据类型的时候在继续深入研究）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//value: 实参（这里有别于 c#, 类似于 lua，不需要管传进来的数据是什么类型的，这一部分暂时不深究，后面学到了在继续的深入理解）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;输入的值大于1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;输入的值小于等于1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;lt;&amp;lt;  输入的值大于 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2022-07-18T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%B8%80%EF%BC%89/</id>
        <title>UnityShader入门精要（渲染流水线 一）</title>
        <link rel="alternate" href="http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%B8%80%EF%BC%89/"/>
        <content type="html">&lt;h2 id=&#34;unityshader入门精要渲染流水线-一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unityshader入门精要渲染流水线-一&#34;&gt;#&lt;/a&gt; UnityShader 入门精要（渲染流水线   一）&lt;/h2&gt;
&lt;h3 id=&#34;渲染流水线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#渲染流水线&#34;&gt;#&lt;/a&gt; 渲染流水线&lt;/h3&gt;
&lt;p&gt;​	接着上回书说到，我根据《UnityShader 入门精要来》这本书来一步一步的学习，这个系列是记录我的学习过程，方便以后查阅，因为我有一个很大的 &amp;quot;优点&amp;quot;，就是很容易忘！&lt;/p&gt;
&lt;p&gt;​	乐乐女神在开始就说了，&amp;quot;没有了解渲染流水线的工作流程，就永远没法说自己入门&amp;quot;，这句话我有很深刻的印象，因为在面试的过程中，面试官会问，什么是渲染流水线？如果回答上来，说明你入门了，可以继续交流，如果这个都没说上来，那就证明不熟悉渲染，只是了解，不过也不是绝对的，有些大佬除外。&lt;/p&gt;
&lt;p&gt;​	渲染流水线是啥？包含了什么？以及这条工作流程最终的结果是啥&lt;/p&gt;
&lt;h5 id=&#34;阐释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阐释&#34;&gt;#&lt;/a&gt; 阐释：&lt;/h5&gt;
&lt;p&gt;​	渲染流水线的工作任务在于一个三维场景的触发，计算机需要从一系列的顶点数据，纹理等信息出发，然后又 CPU 和 GPU 来共同完成的&lt;/p&gt;
&lt;p&gt;​	上面说的很笼统，那就细分一下，将渲染分为三个阶段：&lt;/p&gt;
&lt;p&gt;​	应用阶段 --&amp;gt; 几何阶段 --&amp;gt; 光栅化阶段&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMTEvMjIvN1JOWXV2VEJEZTRPQWhKLnBuZw==&#34;&gt;https://i.loli.net/2021/11/22/7RNYuvTBDe4OAhJ.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211122194636560&amp;quot; style=&amp;quot;zoom: 67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;三个阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三个阶段&#34;&gt;#&lt;/a&gt; 三个阶段&lt;/h5&gt;
&lt;h6 id=&#34;应用阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用阶段&#34;&gt;#&lt;/a&gt; 应用阶段：&lt;/h6&gt;
&lt;p&gt;​		这个阶段是有我们的应用主导的，一般是 CPU 来负责的，对于这部分的内容有绝对的控制，或者说是可编程可开发的阶段，这个阶段有&lt;strong&gt;三个主要的任务&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备好场景数据，比如摄像机的位置，视椎体（如果学过 Unity 的码友，这个其实就是场景摄像机可以渲染的范围，如下图所示，我画的是一个平面的，在 Unity 中是一个梯形立方体形状），还有场景中包含的模型数据（顶点信息，法线的方向，顶点的颜色，纹理坐标），光源等&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/11/22/vmGtgC1xspbL4BF.png&#34; alt=&#34;image-20211122200532800&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;粗粒度剔除（先不要纠结，知道有这一步就好，其实简单理解就是粗略的筛选，将不需要的信息和不可见的物体剔除）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置&lt;strong&gt;每个模型&lt;/strong&gt;的&lt;strong&gt;渲染状态&lt;/strong&gt;，这些渲染的状态包括但不限于它使用的材质（漫反射，高光反射颜色），使用的纹理，使用的 shader 等，这里最最最重要的就是输出&lt;strong&gt;渲染所需的几何信息&lt;/strong&gt;，&lt;strong&gt;渲染图元&lt;/strong&gt;，渲染图元可以是点，可以是线，也可以是三角面等。然后将这些渲染图元传递给下一个工作流水线 ---------- 几何阶段。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;几何阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几何阶段&#34;&gt;#&lt;/a&gt; 几何阶段：&lt;/h6&gt;
&lt;p&gt;​		几何阶段处理我们要绘制的几何相关的工作，例如，需要绘制的图元是什么，怎样绘制他们？ 在哪儿绘制？&lt;br /&gt;
​	这一个阶段通常是在 GPU 上进行的。&lt;br /&gt;
​		几何阶段负责和每一个图元打交道，进行&lt;strong&gt;逐顶点，逐多边形的操作&lt;/strong&gt;，这个阶段可以分为更小的流水线，几何阶段还有一个很重要的任务就是把&lt;strong&gt;顶点坐标变化到屏幕空间中&lt;/strong&gt;，再交给光栅器处理就。对输入的&lt;strong&gt;渲染图元&lt;/strong&gt;进行多歩拆解处理，然后将会输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等相关的信息，传递给光栅化阶段。&lt;/p&gt;
&lt;h6 id=&#34;光栅化阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#光栅化阶段&#34;&gt;#&lt;/a&gt; 光栅化阶段：&lt;/h6&gt;
&lt;p&gt;​		这一阶段将会使用几何阶段传递的数据产生屏幕上的像素，渲染出最终的图像，这一阶段也是在 GPU 上进行的，光栅化的任务就是决定每个&lt;strong&gt;渲染图元&lt;/strong&gt;中的那些像素被绘制到屏幕上来，它需要对几何阶段得到的&lt;strong&gt;逐顶点数据&lt;/strong&gt;（如纹理坐标，顶点颜色等）插值，然后&lt;strong&gt;逐像素&lt;/strong&gt;处理。&lt;/p&gt;
&lt;h6 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结：&lt;/h6&gt;
&lt;p&gt;​		其实这三个流水线是让我们在学习或者是认识流水线的时候划分的三个阶段，每一个阶段中间还有很多小的流水线，明天的章节中，是 GPU 真正实现上述概念的流水线。&lt;/p&gt;
&lt;h6 id=&#34;茶后杂谈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#茶后杂谈&#34;&gt;#&lt;/a&gt; 茶后杂谈：&lt;/h6&gt;
&lt;p&gt;​		其实之前有学过一段时间，但是晒网了，没有继续保持，导致自己迷茫了很长一段时间，现在准备从最基础开始一步一步的向前走，将基础走牢固，切记不可眼高手低，哪怕是很小的知识点，也需要去记忆巩固，走好每一步，永远相信自己，这个系列我会一直更新，每天学一点，，不为别的，只为自己更新。&lt;/p&gt;
</content>
        <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2022-05-16T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%BA%8C%EF%BC%89/</id>
        <title>UnityShader入门精要（渲染流水线 二）</title>
        <link rel="alternate" href="http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%BA%8C%EF%BC%89/"/>
        <content type="html">&lt;h2 id=&#34;unityshader入门精要渲染流水线-二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unityshader入门精要渲染流水线-二&#34;&gt;#&lt;/a&gt; UnityShader 入门精要（渲染流水线   二）&lt;/h2&gt;
&lt;h3 id=&#34;渲染流水线之cpu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#渲染流水线之cpu&#34;&gt;#&lt;/a&gt; 渲染流水线之 CPU&lt;/h3&gt;
&lt;p&gt;​		我根据《UnityShader 入门精要来》这本书来一步一步的学习，这个系列是记录我的学习过程，方便以后查阅，因为我有一个很大的 &amp;quot;优点&amp;quot;，就是很容易忘！&lt;/p&gt;
&lt;p&gt;​		乐乐女神在开始就说了，&amp;quot;没有了解渲染流水线的工作流程，就永远没法说自己入门&amp;quot;，这句话我有很深刻的印象，因为在面试的过程中，面试官会问，什么是渲染流水线？如果回答上来，说明你入门了，可以继续交流，如果这个都没说上来，那就证明不熟悉渲染，只是了解，不过也不是绝对的，有些大佬除外。&lt;/p&gt;
&lt;p&gt;​		渲染流水线是啥？包含了什么？以及这条工作流程最终的结果是啥&lt;/p&gt;
&lt;h5 id=&#34;cup和gpu之间的通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cup和gpu之间的通信&#34;&gt;#&lt;/a&gt; CUP 和 GPU 之间的通信：&lt;/h5&gt;
&lt;p&gt;​		今天来学习学习新的东西 CPU 和 GPU 之间的通信，昨天我们了解到渲染流水线的起点，也就是完全可以控制的应用阶段，应用阶段分为下面三个小阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把数据加载到显存中&lt;/li&gt;
&lt;li&gt;设置渲染状态&lt;/li&gt;
&lt;li&gt;调用 DrawCall（俗称 DC）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​     那先说说第一个阶段，将数据加载到显存中&lt;/p&gt;
&lt;h6 id=&#34;数据加载到显存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据加载到显存&#34;&gt;#&lt;/a&gt; 数据加载到显存：&lt;/h6&gt;
&lt;p&gt;​		所有的渲染数据都需要从硬盘中加载到系统内存中，然后操作内存中的数据加载到显卡的显存中，因为显卡对于显存的访问便利程度远远大于内存（访问便利程度就是指访问速度和访问的权限，因为大多数显卡没有直接访问内存的权限）&lt;/p&gt;
&lt;p&gt;如下图所示：渲染所需的数据（两张纹理以及三个网格）从硬盘加载到显存中的流程，这样在渲染时，显卡可以直接很快的去访问显卡中存储的数据来进行渲染。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/11/23/rzfYBNC9K8cQIXs.png&#34; alt=&#34;image-20211123210320124&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;figcaption data-lang=&#34;lua&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;需要注意：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;真实渲染的过程更加的复杂，这里只是将流程简单的梳理出来；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;例如，顶点的位置信息，法线的方向，顶点的颜色，纹理坐标等&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​		当把数据加载到显存中后，内存中的数据就可以移除了；但是对于一些数据来说，是 CPU 所需要的，CPU 仍然需要访问他们（例如，希望 CPU 可以访问网格数据来进行碰撞检测），那这些就是需要的数据。不希望移除，因为从硬盘加载到内存的过程十分的耗时。&lt;/p&gt;
&lt;p&gt;数据加载准备完毕以后，接下来就可以通过 CPU 设置渲染状态，来指导 GPU 进行渲染工作。&lt;/p&gt;
&lt;h6 id=&#34;设置渲染状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置渲染状态&#34;&gt;#&lt;/a&gt; 设置渲染状态：&lt;/h6&gt;
&lt;p&gt;​		啥是渲染状态 ¿ 通俗的说就是，这些个状态定义了场景中的网格是怎么被渲染出来的，例如：使用了那个顶点着色器或者是片元着色器，光源的属性，材质等，如果没有更改渲染状态，那么所有网格就是一个渲染的状态，下图使用一种渲染状态渲染三个不同网格的结果，由于没有改变 3 个网格的外观，所以看起来是同一个材质的物体&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/11/23/Tq3rfEd2MvU4l9W.png&#34; alt=&#34;image-20211123210358539&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​		在准备好所有的工作后，CPU 就需要调用一个渲染命令（DrawCall）来告诉 GPU，数据准备 ok，可以按照设置的指令来开始渲染了&lt;/p&gt;
&lt;h6 id=&#34;调用drawcall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用drawcall&#34;&gt;#&lt;/a&gt; 调用 DrawCall：&lt;/h6&gt;
&lt;p&gt;​		实际上 DrawCall 就是一个指令，CPU ——&amp;gt;GPU，这个命令仅仅会指向一个需要被渲染的&lt;strong&gt;图元列表&lt;/strong&gt;，而不会再包含任何材质信息。如下图所示，CPU 告诉 GPU 开始进行渲染，&lt;strong&gt;一个 DrawCall 会指向本次调用需要渲染的图元列表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2021/11/23/T1OhgbvIre7PMmc.png&#34; alt=&#34;image-20211123211041976&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​		当给定一个 DrwaCall 时，GPU 就会根据渲染状态（如，材质，纹理，shader 等）和所输入的顶点数据来进行计算，最终输出成屏幕上显示的漂漂亮亮的像素。&lt;/p&gt;
&lt;h6 id=&#34;茶后杂谈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#茶后杂谈&#34;&gt;#&lt;/a&gt; 茶后杂谈：&lt;/h6&gt;
&lt;p&gt;​		今天是第二天学习 shader，坚持下去，一定会有收获！不求学太多，每天进步一点。&lt;/p&gt;
</content>
        <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2022-05-16T16:00:00.000Z</updated>
    </entry>
</feed>
