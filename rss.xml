<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hexo</title>
        <link>http://example.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 10 May 2022 20:05:54 +0800</pubDate>
        <lastBuildDate>Tue, 10 May 2022 20:05:54 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2022/05/10/%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0Lua%E7%89%88/</guid>
            <title></title>
            <link>http://example.com/2022/05/10/%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0Lua%E7%89%88/</link>
            <pubDate>Tue, 10 May 2022 20:05:54 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;项目框架学习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目框架学习&#34;&gt;#&lt;/a&gt; 项目框架学习&lt;/h2&gt;
&lt;h4 id=&#34;baseview基类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#baseview基类&#34;&gt;#&lt;/a&gt; BaseView 基类：&lt;/h4&gt;
&lt;p&gt;以文件名字加冒号调用类似于这种的 BaseView:__init () 皆为方法&lt;/p&gt;
&lt;h5 id=&#34;初始化方法-__init&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初始化方法-__init&#34;&gt;#&lt;/a&gt; 初始化方法 __init&lt;/h5&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:__init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;定义的成员变量-__definevar&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义的成员变量-__definevar&#34;&gt;#&lt;/a&gt; 定义的成员变量 __defineVar&lt;/h5&gt;
&lt;p&gt;定义 view 模块需要的成员变量&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:__defineVar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;打开界面前的预加载-addpreloadlist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打开界面前的预加载-addpreloadlist&#34;&gt;#&lt;/a&gt; 打开界面前的预加载 AddPreLoadList&lt;/h5&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;preLoad_list = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,   &lt;span class=&#34;comment&#34;&gt;-- 打开界面之前需要预加载的资源,除了本模块UI资源外的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将 ab 的名字，资源列表，以及类型插入到 preLoad_list 表中&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:AddPreLoadList&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(abName, assetNameList, type)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;从更节点开始搜寻子对象-getchild&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#从更节点开始搜寻子对象-getchild&#34;&gt;#&lt;/a&gt; 从更节点开始搜寻子对象 GetChild&lt;/h5&gt;
&lt;p&gt;该接口暴露给外部调用&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cache_findChild = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,  &lt;span class=&#34;comment&#34;&gt;-- 缓存FindChild的接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我理解的是从最外层加载的预设开始一层一层的往下找&lt;/p&gt;
&lt;p&gt;返回一个成员方法 self.cache_findChild (self.transform,name)&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:GetChild&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.cache_findChild &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.transform &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.cache_findChild(&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.transform,name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;获取子对象身上的组件-getchildcomponent&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取子对象身上的组件-getchildcomponent&#34;&gt;#&lt;/a&gt; 获取子对象身上的组件 GetChildComponent&lt;/h5&gt;
&lt;p&gt;该接口暴露给外部调用&lt;/p&gt;
&lt;p&gt;首先通过上面的 GetChild 方法来获取到子物体&lt;/p&gt;
&lt;p&gt;有一点要注意 name，com 都是字符类型&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:GetChildComponent&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name,com)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;:GetChild(name):GetComponent(com)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;获取多个孩子transform-getchildtransforms&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取多个孩子transform-getchildtransforms&#34;&gt;#&lt;/a&gt; 获取多个孩子 transform GetChildTransforms&lt;/h5&gt;
&lt;p&gt;获取到 utilManager 的组件方法，供外界使用接口&lt;/p&gt;
&lt;p&gt;这里其实 names 换成 namsList 更好理解一些&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--获取多个孩子transform&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:GetChildTransforms&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(names)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; GetChildTransforms(&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.transform, names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--获取多个孩子go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:GetChildGameObjects&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(names)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; GetChildGameObjects(&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.transform, names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--获取多个孩子image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:GetChildImages&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(names)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; GetChildImages(&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.transform, names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--获取多个孩子text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:GetChildTexts&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(names)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; GetChildTexts(&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.transform, names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;是否真的打开界面-hasopen&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#是否真的打开界面-hasopen&#34;&gt;#&lt;/a&gt; 是否真的打开界面 HasOpen&lt;/h5&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;isPop = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,                  &lt;span class=&#34;comment&#34;&gt;-- 是否可见&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;is_loaded = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,				&lt;span class=&#34;comment&#34;&gt;-- 是否已经加载完&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wait_for_hide = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,			&lt;span class=&#34;comment&#34;&gt;-- 等待加载完隐藏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:HasOpen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;供外部调用接口&lt;/p&gt;
&lt;p&gt;返回 bool 值判断界面是否真的打开&lt;/p&gt;
&lt;h5 id=&#34;移除销毁状态-removedestroytimer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移除销毁状态-removedestroytimer&#34;&gt;#&lt;/a&gt; 移除销毁状态 RemoveDestroyTimer&lt;/h5&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:RemoveDestroyTimer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用了 TimerQuest.CancelQuest (GlobalTimerQuest, self.destroy_timer) 将移除状态保存起来&lt;/p&gt;
&lt;h5 id=&#34;打开界面-open&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打开界面-open&#34;&gt;#&lt;/a&gt; 打开界面 Open&lt;/h5&gt;
&lt;p&gt;这个方法是打开界面的主要方法&lt;/p&gt;
&lt;p&gt;通过修改以下这些字段控制界面 view 的显示&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;isPop = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,    				&lt;span class=&#34;comment&#34;&gt;-- 是否可见&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wait_for_hide = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,			&lt;span class=&#34;comment&#34;&gt;-- 等待加载完隐藏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_use_delete_method = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,		&lt;span class=&#34;comment&#34;&gt;-- 是否调用过delete函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:Open&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;移除定时器&lt;/p&gt;
&lt;p&gt;打开的模式默认为 OpenMode.OpenOnly，只打开界面&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果是切换场景关闭 View，调用 EventSystem.Bind () 绑定界面，拿到 EventName 中对应的 EventId SceneEventType.SCENE_CHANGED 并注册关闭 View 事件，然后调用 auto_close_view 方法字段关闭界面&lt;/li&gt;
&lt;li&gt;如果是重新进入场景关闭 View，调用 EventSystem.Bind () 绑定界面，拿到 EventName 中对应的 EventId SceneEventType.SCENE_REENTER 并注册关闭 View 事件，然后调用 auto_close_view 方法字段关闭界面&lt;/li&gt;
&lt;li&gt;如果是切换场景隐藏 View，调用 EventSystem.Bind () 绑定界面，拿到 EventName 中对应的 EventId SceneEventType.OPEN_SCENE_LOAD_VIEW 并注册切换场景隐藏 View 事件，然后调用 auto_hide_view 方法字段隐藏界面，若场景切换完毕，则注册 EventName.SCENE_LOAD_VIEW_COMPLETE，调用 auto_show_view 方法字显示 View&lt;/li&gt;
&lt;li&gt;如果是打开界面，需要关闭主界面，就注册 EventName.CLOSE_ALL_VIEW 事件，然后调用 auto_close_view 方法字段关闭所有的 view&lt;/li&gt;
&lt;li&gt;新手引导注册 EventName.TRIGGER_GUIDE_TYPE 事件，并执行 onTriggerGuideHandler () 方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;异步加载资源-asnycloadlayout&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步加载资源-asnycloadlayout&#34;&gt;#&lt;/a&gt; 异步加载资源 AsnycLoadLayout&lt;/h5&gt;
&lt;p&gt;需要先加载额外的依赖资源&lt;/p&gt;
&lt;p&gt;当一个界面时间大于 15s 都没有打开，那么就触发关闭的流程，避免卡住流程&lt;/p&gt;
&lt;p&gt;当没有预设的时候就创建一个新的空对象&lt;/p&gt;
&lt;p&gt;否则调用 LuaViewManager.LoadView 添加加载界面&lt;/p&gt;
&lt;p&gt;加载页面打开就确定&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:AsnycLoadLayout&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;异步资源加载完成之后打开界面-createmainwindow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步资源加载完成之后打开界面-createmainwindow&#34;&gt;#&lt;/a&gt; 异步资源加载完成之后打开界面 CreateMainWindow&lt;/h5&gt;
&lt;p&gt;在异步预加载资源之后，如果界面比较大，一时加载的资源比较多的时候，就要做延迟处理 LuaViewManager.AddDelayQueue 加入到延迟队列&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:CreateMainWindow&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;处理打开界面深度以及层级-afteropen&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理打开界面深度以及层级-afteropen&#34;&gt;#&lt;/a&gt; 处理打开界面深度以及层级 AfterOpen&lt;/h5&gt;
&lt;p&gt;若界面需要等待隐藏时候就重新设置其深度值，并隐藏界面 UIZDepth.ResetUIZDepth (self)&lt;/p&gt;
&lt;p&gt;反之直接显示界面，在设置其层级 self:SetUIDepth (self.gameObject)&lt;/p&gt;
&lt;p&gt;大界面则需要加入到延迟显示队列中&lt;/p&gt;
&lt;p&gt;不需要打开就直接调用 self:Close () 关闭&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:AfterOpen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;立即销毁界面-closedestroy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#立即销毁界面-closedestroy&#34;&gt;#&lt;/a&gt; 立即销毁界面 CloseDestroy ()&lt;/h5&gt;
&lt;p&gt;调用此方法以后会立即从内存中销毁界面&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:CloseDestroy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;不需要立即从内存销毁界面-destroy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不需要立即从内存销毁界面-destroy&#34;&gt;#&lt;/a&gt; 不需要立即从内存销毁界面 Destroy ()&lt;/h5&gt;
&lt;p&gt;调用此方法不会将界面从内存中马上清楚，会保留在内存中，解除绑定事件&lt;/p&gt;
&lt;p&gt;并将状态重置，然后干掉界面引用&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseView:Destroy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;界面打开模式，默认为 OpenOnly（只打开）,  还有一种 OpenToggle（界面没有打开就打开，打开了就关闭）模式&lt;/p&gt;
&lt;p&gt;界面关闭模式，默认为 CloseDestroy（立即销毁）， 另一种是 CloseVisible（隐藏）模式&lt;/p&gt;
&lt;h4 id=&#34;basecontroller基类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontroller基类&#34;&gt;#&lt;/a&gt; BaseController 基类：&lt;/h4&gt;
&lt;h5 id=&#34;basecontroller__init&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontroller__init&#34;&gt;#&lt;/a&gt; BaseController:__init()&lt;/h5&gt;
&lt;p&gt;先绑定界面销毁事件监听回调，回调是依附于在界面 Destroy 的时候会触发 BaseView.DestroyEvent 函数，控制器监听到回调后就会调用 self:clearViewQuoted (view)，检查界面是否正确的执行 deleteMe 方法进行释放&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BaseController:__init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;--销毁引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;keyword&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;onViewDestoryHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(view)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		 &lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;:clearViewQuoted(view)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;.clearViewQuoted_BindId = &lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;:Bind(BaseView.DestroyEvent,onViewDestoryHandler)	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;basecontrollerenablecheckoutclearbool&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontrollerenablecheckoutclearbool&#34;&gt;#&lt;/a&gt; BaseController:EnableCheckoutClear(bool)&lt;/h5&gt;
&lt;p&gt;controller 实例的对象会在初始化时调用，会监听界面的 BaseView.CreateView 事件，然后将实例添加到 view_list 中&lt;/p&gt;
&lt;p&gt;当控制器监听到账户切换和角色切换就关闭所有的界面&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;:Bind(EventName.CHANGE_ACCOUNT, close_view)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;:Bind(EventName.CHANGE_ROLE, close_view)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;basecontrollerregisterprotocalid-func_name&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontrollerregisterprotocalid-func_name&#34;&gt;#&lt;/a&gt; BaseController:RegisterProtocal(id, func_name)&lt;/h5&gt;
&lt;p&gt;注册指定协议响应的方法，然后编写一个闭包函数，函数内部会查找 controller 实例中是否存在指定方法名的方法，有就执行，接着将该方法和实例注册到协议处理类的 register_list 中&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;local&lt;/span&gt; register_func = &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;register_func =  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(data_list)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;local&lt;/span&gt; oper_func = &lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;[func_name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; oper_func &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	oper_func(&lt;span class=&#34;built_in&#34;&gt;self&lt;/span&gt;, data_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;UserMsgAdapter.RegisterMsgOperate(id, register_func)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;basecontrollersendfmttogamecmd-fmt_str&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontrollersendfmttogamecmd-fmt_str&#34;&gt;#&lt;/a&gt; BaseController:SendFmtToGame(cmd, fmt_str, …)&lt;/h5&gt;
&lt;p&gt;将协议内容整合成一个 vo，然后插入到 request_protocals_list 中&lt;/p&gt;
&lt;h5 id=&#34;basecontrolleraddcustomdelaysendfmt-buffer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontrolleraddcustomdelaysendfmt-buffer&#34;&gt;#&lt;/a&gt; BaseController.AddCustomDelaySendFmt( buffer )&lt;/h5&gt;
&lt;p&gt;请求将发送的协议放入 request_protocals_list 内&lt;/p&gt;
&lt;h5 id=&#34;basecontrollerdelaysendfmttogamecombine&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontrollerdelaysendfmttogamecombine&#34;&gt;#&lt;/a&gt; BaseController.DelaySendFmtToGameCombine()&lt;/h5&gt;
&lt;p&gt;BaseController.DelaySendFmtToGame()&lt;/p&gt;
&lt;p&gt;将消息缓存到协议队列，然后在在发送的时候按帧触发，避免玩家在操作的时候频繁点击，发包量过大&lt;/p&gt;
&lt;h5 id=&#34;basecontrollersendfmttogameimmecmd-fmt_str&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#basecontrollersendfmttogameimmecmd-fmt_str&#34;&gt;#&lt;/a&gt; BaseController:SendFmtToGameImme(cmd, fmt_str, …)&lt;/h5&gt;
&lt;p&gt;发送重要的协议时可以调用此接口，然后就会立即发送协议一般是那种频率不高，但是内容比较重要，需要及时处理数据的时候&lt;/p&gt;
&lt;p&gt;了解了&lt;/p&gt;
&lt;p&gt;今日学习：&lt;/p&gt;
&lt;p&gt;看了项目的背包模块，&lt;/p&gt;
&lt;p&gt;Model 这一模块没有看&lt;/p&gt;
&lt;p&gt;View 这个模块 中是 load_callback（里面有 LoadSuccess 用来把 ui 界面的组件和回调方法注册到事件），open_callback 将数据跟新到界面 UI 中，close_callback 执行界面关闭时的回调。&lt;/p&gt;
&lt;p&gt;Controller 的话主要就是注册协议和绑定一些需要用到的事件，模块之间通过 Controller 来交互，引用很多其他模块&lt;/p&gt;
&lt;figure class=&#34;highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--出现频率比较高的类或者方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--GlobalEventSystem:Fire()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--Util类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--GlobalEventSystem:Bind()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--UiFactory类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--Message.show() 飘字提示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;25d视角&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25d视角&#34;&gt;#&lt;/a&gt; 2.5D 视角&lt;/h4&gt;
&lt;p&gt;AC = AB * sin (θ)，又因为 θ 就是相机的俯仰角，即为我们的所求，所以 3D 线段和投影线段之间的关系为：&lt;strong&gt;投影线段 = 3D 线段 * sin (俯仰角)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210726141850309.png&#34; alt=&#34;image-20210726141850309&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于相机俯仰运动时的旋转轴平行于 AB 方向，故而 AB 的长度即为正方形在 3D 世界中的真实长度。CD 长度垂直于俯仰旋转轴，根据上述公式可得&lt;strong&gt; CD 长度 = 3D 世界中正方形 CD 长度 * sin (俯仰角)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210726142042723.png&#34; alt=&#34;image-20210726142042723&#34;&gt;&lt;/p&gt;
&lt;p&gt;故而&lt;strong&gt; 30° 俯视角是最佳倾斜角&lt;/strong&gt;，也就是说&lt;strong&gt;图片宽高比为 1:2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了切图方便，美术会把贴图的长宽像素值都设为整数，因为美术&lt;strong&gt;无法切出 0.5 个像素的图片&lt;/strong&gt;，那么就要求 AB 和 CD 都是整数。如果俯仰角 θ 也是整数，将会让美术很方便地调整模型制作软件（如 Maya、3ds max 等）的相机角度，通过 3D 渲染，将 3D 模型烘焙成 2D 图片，以供游戏中直接使用&lt;/p&gt;
&lt;p&gt;遍历三角函数查找表，只有 sin (30°) 的分子分母都为整数，也就是说只有 30° 这个角度有可能让长宽都为整数，具体可参看&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvTml2ZW4lMjdzX1RoZW9yZW0=&#34;&gt;尼文定理&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以 2.5D 游戏应该称做斜 30 度视角游戏&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
