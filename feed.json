{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/11/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%BA%8C%EF%BC%89/",
            "url": "http://example.com/2022/05/11/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%BA%8C%EF%BC%89/",
            "title": "",
            "date_published": "2022-05-11T12:32:22.153Z",
            "content_html": "<h2 id=\"unityshader入门精要渲染流水线-二\"><a class=\"markdownIt-Anchor\" href=\"#unityshader入门精要渲染流水线-二\">#</a> UnityShader 入门精要（渲染流水线   二）</h2>\n<h3 id=\"渲染流水线之cpu\"><a class=\"markdownIt-Anchor\" href=\"#渲染流水线之cpu\">#</a> 渲染流水线之 CPU</h3>\n<p>​\t\t我根据《UnityShader 入门精要来》这本书来一步一步的学习，这个系列是记录我的学习过程，方便以后查阅，因为我有一个很大的 &quot;优点&quot;，就是很容易忘！</p>\n<p>​\t\t乐乐女神在开始就说了，“没有了解渲染流水线的工作流程，就永远没法说自己入门”，这句话我有很深刻的印象，因为在面试的过程中，面试官会问，什么是渲染流水线？如果回答上来，说明你入门了，可以继续交流，如果这个都没说上来，那就证明不熟悉渲染，只是了解，不过也不是绝对的，有些大佬除外。</p>\n<p>​\t\t渲染流水线是啥？包含了什么？以及这条工作流程最终的结果是啥</p>\n<h5 id=\"cup和gpu之间的通信\"><a class=\"markdownIt-Anchor\" href=\"#cup和gpu之间的通信\">#</a> CUP 和 GPU 之间的通信：</h5>\n<p>​\t\t今天来学习学习新的东西 CPU 和 GPU 之间的通信，昨天我们了解到渲染流水线的起点，也就是完全可以控制的应用阶段，应用阶段分为下面三个小阶段：</p>\n<ul>\n<li>把数据加载到显存中</li>\n<li>设置渲染状态</li>\n<li>调用 DrawCall（俗称 DC）</li>\n</ul>\n<p>​     那先说说第一个阶段，将数据加载到显存中</p>\n<h6 id=\"数据加载到显存\"><a class=\"markdownIt-Anchor\" href=\"#数据加载到显存\">#</a> 数据加载到显存：</h6>\n<p>​\t\t所有的渲染数据都需要从硬盘中加载到系统内存中，然后操作内存中的数据加载到显卡的显存中，因为显卡对于显存的访问便利程度远远大于内存（访问便利程度就是指访问速度和访问的权限，因为大多数显卡没有直接访问内存的权限）</p>\n<p>如下图所示：渲染所需的数据（两张纹理以及三个网格）从硬盘加载到显存中的流程，这样在渲染时，显卡可以直接很快的去访问显卡中存储的数据来进行渲染。</p>\n<p><img data-src=\"https://i.loli.net/2021/11/23/rzfYBNC9K8cQIXs.png\" alt=\"image-20211123210320124\"></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要注意：</span><br><span class=\"line\">真实渲染的过程更加的复杂，这里只是将流程简单的梳理出来；</span><br><span class=\"line\">例如，顶点的位置信息，法线的方向，顶点的颜色，纹理坐标等</span><br></pre></td></tr></table></figure>\n<p>​\t\t当把数据加载到显存中后，内存中的数据就可以移除了；但是对于一些数据来说，是 CPU 所需要的，CPU 仍然需要访问他们（例如，希望 CPU 可以访问网格数据来进行碰撞检测），那这些就是需要的数据。不希望移除，因为从硬盘加载到内存的过程十分的耗时。</p>\n<p>数据加载准备完毕以后，接下来就可以通过 CPU 设置渲染状态，来指导 GPU 进行渲染工作。</p>\n<h6 id=\"设置渲染状态\"><a class=\"markdownIt-Anchor\" href=\"#设置渲染状态\">#</a> 设置渲染状态：</h6>\n<p>​\t\t啥是渲染状态 ¿ 通俗的说就是，这些个状态定义了场景中的网格是怎么被渲染出来的，例如：使用了那个顶点着色器或者是片元着色器，光源的属性，材质等，如果没有更改渲染状态，那么所有网格就是一个渲染的状态，下图使用一种渲染状态渲染三个不同网格的结果，由于没有改变 3 个网格的外观，所以看起来是同一个材质的物体</p>\n<p><img data-src=\"https://i.loli.net/2021/11/23/Tq3rfEd2MvU4l9W.png\" alt=\"image-20211123210358539\"></p>\n<p>​\t\t在准备好所有的工作后，CPU 就需要调用一个渲染命令（DrawCall）来告诉 GPU，数据准备 ok，可以按照设置的指令来开始渲染了</p>\n<h6 id=\"调用drawcall\"><a class=\"markdownIt-Anchor\" href=\"#调用drawcall\">#</a> 调用 DrawCall：</h6>\n<p>​\t\t实际上 DrawCall 就是一个指令，CPU ——&gt;GPU，这个命令仅仅会指向一个需要被渲染的<strong>图元列表</strong>，而不会再包含任何材质信息。如下图所示，CPU 告诉 GPU 开始进行渲染，<strong>一个 DrawCall 会指向本次调用需要渲染的图元列表</strong>。</p>\n<p><img data-src=\"https://i.loli.net/2021/11/23/T1OhgbvIre7PMmc.png\" alt=\"image-20211123211041976\"></p>\n<p>​\t\t当给定一个 DrwaCall 时，GPU 就会根据渲染状态（如，材质，纹理，shader 等）和所输入的顶点数据来进行计算，最终输出成屏幕上显示的漂漂亮亮的像素。</p>\n<h6 id=\"茶后杂谈\"><a class=\"markdownIt-Anchor\" href=\"#茶后杂谈\">#</a> 茶后杂谈：</h6>\n<p>​\t\t今天是第二天学习 shader，坚持下去，一定会有收获！不求学太多，每天进步一点。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/05/11/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%B8%80%EF%BC%89/",
            "url": "http://example.com/2022/05/11/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%B8%80%EF%BC%89/",
            "title": "",
            "date_published": "2022-05-11T12:32:22.143Z",
            "content_html": "<h2 id=\"unityshader入门精要渲染流水线-一\"><a class=\"markdownIt-Anchor\" href=\"#unityshader入门精要渲染流水线-一\">#</a> UnityShader 入门精要（渲染流水线   一）</h2>\n<h3 id=\"渲染流水线\"><a class=\"markdownIt-Anchor\" href=\"#渲染流水线\">#</a> 渲染流水线</h3>\n<p>​\t接着上回书说到，我根据《UnityShader 入门精要来》这本书来一步一步的学习，这个系列是记录我的学习过程，方便以后查阅，因为我有一个很大的 &quot;优点&quot;，就是很容易忘！</p>\n<p>​\t乐乐女神在开始就说了，“没有了解渲染流水线的工作流程，就永远没法说自己入门”，这句话我有很深刻的印象，因为在面试的过程中，面试官会问，什么是渲染流水线？如果回答上来，说明你入门了，可以继续交流，如果这个都没说上来，那就证明不熟悉渲染，只是了解，不过也不是绝对的，有些大佬除外。</p>\n<p>​\t渲染流水线是啥？包含了什么？以及这条工作流程最终的结果是啥</p>\n<h5 id=\"阐释\"><a class=\"markdownIt-Anchor\" href=\"#阐释\">#</a> 阐释：</h5>\n<p>​\t渲染流水线的工作任务在于一个三维场景的触发，计算机需要从一系列的顶点数据，纹理等信息出发，然后又 CPU 和 GPU 来共同完成的</p>\n<p>​\t上面说的很笼统，那就细分一下，将渲染分为三个阶段：</p>\n<p>​\t应用阶段 --&gt; 几何阶段 --&gt; 光栅化阶段</p>\n<img data-src=\"https://i.loli.net/2021/11/22/7RNYuvTBDe4OAhJ.png\" alt=\"image-20211122194636560\" style=\"zoom: 67%;\" />\n<h5 id=\"三个阶段\"><a class=\"markdownIt-Anchor\" href=\"#三个阶段\">#</a> 三个阶段</h5>\n<h6 id=\"应用阶段\"><a class=\"markdownIt-Anchor\" href=\"#应用阶段\">#</a> 应用阶段：</h6>\n<p>​\t\t这个阶段是有我们的应用主导的，一般是 CPU 来负责的，对于这部分的内容有绝对的控制，或者说是可编程可开发的阶段，这个阶段有<strong>三个主要的任务</strong></p>\n<ol>\n<li>\n<p>准备好场景数据，比如摄像机的位置，视椎体（如果学过 Unity 的码友，这个其实就是场景摄像机可以渲染的范围，如下图所示，我画的是一个平面的，在 Unity 中是一个梯形立方体形状），还有场景中包含的模型数据（顶点信息，法线的方向，顶点的颜色，纹理坐标），光源等</p>\n<p><img data-src=\"https://i.loli.net/2021/11/22/vmGtgC1xspbL4BF.png\" alt=\"image-20211122200532800\"></p>\n</li>\n<li>\n<p>粗粒度剔除（先不要纠结，知道有这一步就好，其实简单理解就是粗略的筛选，将不需要的信息和不可见的物体剔除）</p>\n</li>\n<li>\n<p>设置<strong>每个模型</strong>的<strong>渲染状态</strong>，这些渲染的状态包括但不限于它使用的材质（漫反射，高光反射颜色），使用的纹理，使用的 shader 等，这里最最最重要的就是输出<strong>渲染所需的几何信息</strong>，<strong>渲染图元</strong>，渲染图元可以是点，可以是线，也可以是三角面等。然后将这些渲染图元传递给下一个工作流水线 ---------- 几何阶段。</p>\n</li>\n</ol>\n<h6 id=\"几何阶段\"><a class=\"markdownIt-Anchor\" href=\"#几何阶段\">#</a> 几何阶段：</h6>\n<p>​\t\t几何阶段处理我们要绘制的几何相关的工作，例如，需要绘制的图元是什么，怎样绘制他们？ 在哪儿绘制？<br>\n​\t这一个阶段通常是在 GPU 上进行的。<br>\n​\t\t几何阶段负责和每一个图元打交道，进行<strong>逐顶点，逐多边形的操作</strong>，这个阶段可以分为更小的流水线，几何阶段还有一个很重要的任务就是把<strong>顶点坐标变化到屏幕空间中</strong>，再交给光栅器处理就。对输入的<strong>渲染图元</strong>进行多歩拆解处理，然后将会输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等相关的信息，传递给光栅化阶段。</p>\n<h6 id=\"光栅化阶段\"><a class=\"markdownIt-Anchor\" href=\"#光栅化阶段\">#</a> 光栅化阶段：</h6>\n<p>​\t\t这一阶段将会使用几何阶段传递的数据产生屏幕上的像素，渲染出最终的图像，这一阶段也是在 GPU 上进行的，光栅化的任务就是决定每个<strong>渲染图元</strong>中的那些像素被绘制到屏幕上来，它需要对几何阶段得到的<strong>逐顶点数据</strong>（如纹理坐标，顶点颜色等）插值，然后<strong>逐像素</strong>处理。</p>\n<h6 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结：</h6>\n<p>​\t\t其实这三个流水线是让我们在学习或者是认识流水线的时候划分的三个阶段，每一个阶段中间还有很多小的流水线，明天的章节中，是 GPU 真正实现上述概念的流水线。</p>\n<h6 id=\"茶后杂谈\"><a class=\"markdownIt-Anchor\" href=\"#茶后杂谈\">#</a> 茶后杂谈：</h6>\n<p>​\t\t其实之前有学过一段时间，但是晒网了，没有继续保持，导致自己迷茫了很长一段时间，现在准备从最基础开始一步一步的向前走，将基础走牢固，切记不可眼高手低，哪怕是很小的知识点，也需要去记忆巩固，走好每一步，永远相信自己，这个系列我会一直更新，每天学一点，，不为别的，只为自己更新。</p>\n",
            "tags": []
        }
    ]
}