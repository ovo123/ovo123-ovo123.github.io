{
    "version": "https://jsonfeed.org/version/1",
    "title": "斯人若彩虹",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/12/01/c#/c#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://example.com/2022/12/01/c#/c#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "c#基础",
            "date_published": "2022-11-30T16:00:00.000Z",
            "content_html": "<h2 id=\"1数据类型\"><a class=\"anchor\" href=\"#1数据类型\">#</a> 1. 数据类型</h2>\n<h3 id=\"11-值类型\"><a class=\"anchor\" href=\"#11-值类型\">#</a> 1.1 值类型</h3>\n<p>​\t看值类型之前，了解到 c# 中的八种整数类型，分别是 <code>sbyte，byte，short，ushort，int，uint，long，ulong</code> ，基类库为 <code>System.Int</code> 。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212011741218.png\" alt=\"image-20221201172545156\" /></p>\n<h3 id=\"12-浮点类型\"><a class=\"anchor\" href=\"#12-浮点类型\">#</a> 1.2 浮点类型</h3>\n<p>​\t浮点数的精度由有效数位的个数决定的，从 <code>.Net Core 3.0</code>  开始， <code>double</code> （双精度）型浮点可以表示的有效数数子最多为 <code>17</code>  位， <code>float</code>  型为最多九位（有一个前提，是该浮点数不是由字符串转换得来的），浮点数类型采用二进制浮点数来存储数值，这种方法会在小数部分产生舍入的误差问题，所以在实际的运算之中，用十进制和二进制所表示的实数都存在舍入的误差问题，作为对比， <code>c#</code> 的 <code>decimal</code>  类型在其所允许的进度范围之内不会有误差的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212011751475.png\" alt=\"image-20221201175117417\" /></p>\n<h3 id=\"13-decimal类型\"><a class=\"anchor\" href=\"#13-decimal类型\">#</a> 1.3 decimal 类型</h3>\n<p>​\t <code>c#</code> 提供了 128 位精度的十进制浮点类型，它适合大而精确的计算，适用于金融的计算，decimal 类型保证范围内所有十进制数都是精确的，即 0.1 就是 0.1，而不是近似值，虽然精度高，但是范围小，是在一个可控制的范围，所以就会出现浮点数类型转换位 decimal 类型发生溢出的错误</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212011759514.png\" alt=\"image-20221201175941461\" /></p>\n<h3 id=\"14-布尔类型\"><a class=\"anchor\" href=\"#14-布尔类型\">#</a> 1.4 布尔类型</h3>\n<p>​\tc# 的第四个基元类型是 <code>布尔类型</code> （Boolen），允许的值包括关键字 true 和 false 其基类为 <code>System.Boolen</code> ，理论上一个二进制位足以容纳一个布尔类型的值，但 bool 实际上的大小为一个字节</p>\n<h3 id=\"15-字符类型\"><a class=\"anchor\" href=\"#15-字符类型\">#</a> 1.5 字符类型</h3>\n<p>​\t字符类型 char 表示 16 位字符，取值的范围对应于 Unicode 字符集，从技术上说，char 的大小和 16 位无符号整型（ushort）相同，但是 char 是 c# 的特有类型，要单独的对待。char 类型的基类为 <code>System.Char</code> ，有的字符不可以直接插入源代码，需要再进行特殊处理，首先输入反斜杠（\\）前缀，再加上特殊的字符代码。反斜杠加上特殊字符代码统称为转义序列。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212012021093.png\" alt=\"image-20221201202144047\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212012025693.png\" alt=\"image-20221201202524650\" /></p>\n<h3 id=\"16-字符串\"><a class=\"anchor\" href=\"#16-字符串\">#</a> 1.6 字符串</h3>\n<p>​\t零或者是多个字符的有限序列称为字符串，c# 的字符串是 string 类型，基类为 <code>System.String</code> ，string 是一种不可变类型。</p>\n<pre><code>#### 1.61 字面值\n</code></pre>\n<p>​\t字面值字符串输入代码，需要将文本放入到双引号中（&quot;Hello，World&quot;），c# 允许在字符串前使用 @符号，指明转义序列不被处理，结果是一个 <code>逐字字符串字面值</code> ，它会将反斜杠当做普通的字符，还会逐字解释所有的空白字符</p>\n<pre><code class=\"language-c#\">//在Unity中也是遵守这个条件的 \nvoid Start()\n&#123;\n    //在双引号之前加上@，就可以将字符串原样输出，转移字符将不处理\n    string str = @&quot;\\n\\t$%^&amp;*(((((**&amp;^&amp;^^^ &quot;;\n    Debug.Log(str);\n&#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021543031.png\" alt=\"image-20221202154355989\" /></p>\n<p>​\t假如同一个字符串字面值在程序集中多次出现，编译器在程序集中只定义字符串一次，且所有变量都指向它，如此，假如在代码中多次插入包含大量字符的同一个字符串字面值，最终的程序集只反映其中一个的大小。要想链接字符串就需要用 <code>+</code>  号操作符。</p>\n<h4 id=\"162-字符串插值\"><a class=\"anchor\" href=\"#162-字符串插值\">#</a> 1.62 字符串插值</h4>\n<p>​\t字符串可以用插值技术嵌入表达式，语法就是在字符串前添加 $ 符号，并在字符中用一对大括号嵌入表达式，如下所示</p>\n<pre><code class=\"language-c#\">void Start()\n&#123;\n    string name = &quot;rainbow&quot;;\n    int age = 15;\n    string sex = &quot;女&quot;;\n    //使用$来实现字符串的格式化\n    string desc = $&quot;我是&#123;name&#125;,今年&#123;age&#125;岁了,我是&#123;sex&#125;孩子喔！&quot;;\n    Debug.Log(desc);\n&#125;\n\n\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021542843.png\" alt=\"image-20221202154242787\" /></p>\n<p>​\t而且，逐字和插值可组合使用，但是要先指定 $，再指定 @，适用场景为字符串太长，需要字符逐字输出，那么就可以做到，稍微修改一下代码</p>\n<pre><code class=\"language-c#\">void Start()\n&#123;\n    string name = &quot;rainbow&quot;;\n    int age = 15;\n    string sex = &quot;女&quot;;\n    //使用$来实现字符串的格式化,加上@逐字输出\n    string desc = $@&quot;我是&#123;name&#125;,今年&#123;age&#125;岁了,\n               ** **\n             **  *  **\n            ***     ***\n             **     **\n              **   **\n                ***\n            我是&#123;sex&#125;孩子喔！&quot;;\n    Debug.Log(desc);\n&#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021550918.png\" alt=\"image-20221202155058869\" /></p>\n<p>​\t字符串插值的内部工作原理就是调用了 <code>string.Format()</code>  方法的 <code>语法糖</code> ，如下面代码所示，两个的效果是一模一样的</p>\n<pre><code class=\"language-c#\">void Start()\n&#123;\n    string name = &quot;rainbow&quot;;\n    int age = 15;\n    string sex = &quot;女&quot;;\n    //$语法糖其实是调用了string.Format()\n    object[] args = new object[] &#123;name, age, sex&#125;;\n    string desc = string.Format(&quot;我是&#123;0&#125;,今年&#123;1&#125;岁了, 我是&#123;2&#125;孩\t  子喔！&quot;, args);\n    Debug.Log(desc);\n&#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021558657.png\" alt=\"image-20221202155809612\" /></p>\n<h4 id=\"163-字符串方法\"><a class=\"anchor\" href=\"#163-字符串方法\">#</a> 1.63 字符串方法</h4>\n<p>​\tstring 类型也提供了几个方法来格式化，链接和比较字符串，具体的可以查看下面的 Api 以及示例，有了字符串插值的时候， <code>string.Format()</code>  就用的比较少了，但是在幕后，编译成 CIL 后都转换为调用 <code>string.Concat()</code>  和 <code>string.Foramat()</code>  来处理字符串的字面值。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021602109.png\" alt=\"image-20221202160209036\" /></p>\n<p>​\t上表列出的都是静态方法，这意味着为了调用方法，需要在方法名之前附加方法所在的类型，（实例方法调用就不以类型名作为前缀了，而是以变量名字，或者对实例的其他引用）作为前缀。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021607155.png\" alt=\"image-20221202160753103\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021608944.png\" alt=\"image-20221202160811881\" /></p>\n<p><strong>高级主题：using 和 using static 指令</strong></p>\n<p>​\t之前调用静态方法需要附加命名空间和类型名前缀， <code>using static</code>  指令添加到文件顶部，每次使用程序集的方法时候，直接使用其中命名的方法即可， <code>using static只支持静态方法或者属性，不支持实例方法</code> 。</p>\n<p>​\tusing 是直接忽略掉命名空间前缀，使用 <code>using</code>  指令时，不管是在实例化时，还是在调用静态方法时，还是在 c#6.0 新增的 nameof 操作符的时候，都可以省略对命名空间的引用，因为 <code>using作用于整个文件或者是命名空间中</code> 。</p>\n<h4 id=\"164-字符串格式化\"><a class=\"anchor\" href=\"#164-字符串格式化\">#</a> 1.64 字符串格式化</h4>\n<p>​\t要在插值或者格式化的字符串中添加实际的左右大括号可以连写两个大括号表示</p>\n<pre><code class=\"language-c#\">void Start()\n&#123;\n    string name = &quot;rainbow&quot;;\n    int age = 15;\n    string sex = &quot;女&quot;;\n    //使用$来实现字符串的格式化\n    object[] args = new object[] &#123;name, age, sex&#125;;\n    string desc = string.Format(&quot;我是&#123;&#123;&#123;0&#125;&#125;&#125;,今年&#123;&#123;&#123;1&#125;&#125;&#125;岁了, \t我是&#123;&#123;&#123;2&#125;&#125;&#125;孩子喔！&quot;, args);\n    Debug.Log(desc);\n&#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021622139.png\" alt=\"image-20221202162202092\" /></p>\n<h4 id=\"165-换行符\"><a class=\"anchor\" href=\"#165-换行符\">#</a> 1.65 换行符</h4>\n<p>​\t跨平台的话要依赖 <code>System.WriteLine()</code>  和 <code>System.Environment.NewLine</code>  而不是 <code>\\n</code>  来确保跨平台兼容.</p>\n<h4 id=\"166-字符串长度\"><a class=\"anchor\" href=\"#166-字符串长度\">#</a> 1.66 字符串长度</h4>\n<p>​\t判断字符串长度可以使用 <code>string</code>  的 <code>Length</code>  成员（或者叫 <code>字段</code> ），该成员是 <code>只读属性</code> ，不能设置，调用时也不需要任何的参数，如下面代码所示，字符串的长度不能直接设置，因为字符串的长度是更具字符数计算出来的，而且字符串是不可变的</p>\n<pre><code class=\"language-c#\">void Start()\n&#123;\n \tstring str = &quot;rainbow_ovo&quot;;\n    Debug.Log($&quot;The str`s length is &#123;str.Length&#125;&quot;);   \n&#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/ovo123/blog_piggo_texture/master/images/202212021636245.png\" alt=\"image-20221202163627208\" /></p>\n<h4 id=\"167-字符串长度不可变\"><a class=\"anchor\" href=\"#167-字符串长度不可变\">#</a> 1.67 字符串长度不可变</h4>\n<p>​\tstring 类型由于性能的问题，一旦定义就无法更改，只能新开辟空间，而且旧的字符串也不可以更改，即使使用 <code>text.ToUpper()</code>  也只是返回一个新的字符串而已，用一个新的变量保存，原来的字符串还在，在内存中并没有改变。</p>\n<p>​\t如果要大量修改字符串，就可以考虑使用 <code>System.Text.StringBuilder</code>  类型，而不是 <code>string</code>  类型，因为 <code>StringBuilder</code>  的实例方法会修改 <code>StringBuilder本身的数据，不返回新的字符串</code> ，也就不会有多余的内存占用。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "TypeScript基础数据类型",
            "date_published": "2022-07-18T16:00:00.000Z",
            "content_html": "<h2 id=\"typescript-基础数据类型\"><a class=\"anchor\" href=\"#typescript-基础数据类型\">#</a> TypeScript 基础数据类型</h2>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基本变量赋值模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//var [变量名] : [类型] = 值；</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> value ：<span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello TypeScript\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"11-any-类型\"><a class=\"anchor\" href=\"#11-any-类型\">#</a> 1.1 \tany 类型</h3>\n<p>声明 any 类型的变量可以赋值任何类型的值，目的是不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查；来获取不清楚具体的变量类型</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> val<span class=\"token operator\">:</span><span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> val<span class=\"token operator\">:</span><span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> val<span class=\"token operator\">:</span><span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> val<span class=\"token operator\">:</span><span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"12boolean-布尔类型\"><a class=\"anchor\" href=\"#12boolean-布尔类型\">#</a> 1.2\tboolean 布尔类型</h3>\n<p>就是和其他变成语言一样的 true 和 false</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> isOpen <span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> isOff <span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"13number-数字类型\"><a class=\"anchor\" href=\"#13number-数字类型\">#</a> 1.3\tnumber  数字类型</h3>\n<p>双精度 64 位浮点数，可以用来表示分数和整数，这里有别于其他的地方，有点类似于 Lua，除了支持十进制和十六进制，还支持二进制和八进制字面量</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> binaryLiteral <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 二进制</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> octallLiteral <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 八进制</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> decLiteral <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\t\t    <span class=\"token comment\">// 十进制</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> hexLiteral <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 十六进制</span></pre></td></tr></table></figure><h3 id=\"14string-字符串类型\"><a class=\"anchor\" href=\"#14string-字符串类型\">#</a> 1.4\tstring 字符串类型</h3>\n<p>使用单引号（ ' ' ）或者双引号（ &quot;&quot; ）来表示字符串类型；反引号（` ）来定义多行文本和内嵌表达式 （ $ {expr}）</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"TS\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> power <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'NB'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>age<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> years old!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"15-数组类型\"><a class=\"anchor\" href=\"#15-数组类型\">#</a> 1.5\t[ ]  数组类型</h3>\n<p>一种是定义类型的数组，还有一种是泛型数组</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"16tuple-元祖\"><a class=\"anchor\" href=\"#16tuple-元祖\">#</a> 1.6\tTuple  元祖</h3>\n<p>定义的数组元素不一定是同一类的，就类似于 lua 中的 <code>table</code>  一样，是一个混合型数组，还有一个联合类型，这个后面记录</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 有两种定义元组的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//（1）提前规定好数据类型，然后赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//let list : [string, number, boolean];</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//list = [\"TS\", 10, true];</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//（2）直接赋值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//let list = [\"TS\", 10, true];</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"TS\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> index <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">++</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// &lt;&lt;  TS string</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// &lt;&lt;  10 number</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// &lt;&lt;  true boolean</span></pre></td></tr></table></figure><h3 id=\"17enum-枚举类型\"><a class=\"anchor\" href=\"#17enum-枚举类型\">#</a> 1.7\tenum 枚举类型</h3>\n<p>枚举可以为数字赋予一个名字，方便明白数字的含义代表什么，默认是从 <code>0</code>  开始，但是也可以自己定义，<strong>没有自己定义值，那么下一个值是上一个值加一</strong></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">enum</span> Color </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        green<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        blue <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        black</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> color_red <span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> color_green <span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> color_blue <span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> color_black <span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color_red<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color_green<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color_blue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color_black<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// &lt;&lt; 1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// &lt;&lt; 2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// &lt;&lt; 4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// &lt;&lt; 5</span></pre></td></tr></table></figure><h3 id=\"18void类型\"><a class=\"anchor\" href=\"#18void类型\">#</a> 1.8\tvoid 类型</h3>\n<p><code>void</code>  类型一般用于方法（函数）有没有返回值，没有返回值则定义成  <code>void</code> ，如果用 void 定义变量的话，就只能赋值 <code>undefined</code>  和 <code>null</code></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//lambda 表示（匿名函数）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 规定是否有返回值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 类似于 lua 的 function，里面可以写返回值，也可以不写</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"19null-和-undefined类型\"><a class=\"anchor\" href=\"#19null-和-undefined类型\">#</a> 1.9\tNull 和 Undefined 类型</h3>\n<p>是所有类型的的子类，意味着，可以赋值给所有类型，包括他们自身，指定了 <code>--strictNullChecks</code>  标记， <code>null</code>  和 <code>undefined</code>  只能赋值给 <code>void</code>  和它们各自，这样就避免有时候需要的数据没有定义导致编译运行出错</p>\n<pre><code>注意：我们鼓励尽可能地使用--strictNullChecks\n</code></pre>\n<h3 id=\"110never类型\"><a class=\"anchor\" href=\"#110never类型\">#</a> 1.10\tNever 类型</h3>\n<p><code>never</code>  类型表示的是那些永不存在的值的类型。 例如，  <code>never</code>  类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是  <code>never</code>  类型，当它们被永不为真的类型保护所约束时。 <code>never</code>  类型是任何类型的子类型，也可以赋值给任何类型；然而，<em>没有</em>类型是 <code>never</code>  的子类型或可以赋值给 <code>never</code>  类型（除了 <code>never</code>  本身之外）。 即使  <code>any</code>  也不可以赋值给 <code>never</code></p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 无限循环，因为定义为 never 了，就不存在条件为假的情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">infiniteLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"111类型断言\"><a class=\"anchor\" href=\"#111类型断言\">#</a> 1.11\t类型断言</h3>\n<p>通过<em>类型断言</em>这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构； 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查（说人话就是，告诉编译器，它就是我定义的类型，就是强制让它成为我想要的类型，使编译不出错）</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 尖括号法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//as 法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "http://example.com/2022/07/19/LayaAir/%E6%90%AD%E5%BB%BALayeAirBox%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BC%96%E8%AF%91%E7%A4%BA%E4%BE%8B/",
            "url": "http://example.com/2022/07/19/LayaAir/%E6%90%AD%E5%BB%BALayeAirBox%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BC%96%E8%AF%91%E7%A4%BA%E4%BE%8B/",
            "title": "搭建LayeAirBox开发环境及编译示例",
            "date_published": "2022-07-18T16:00:00.000Z",
            "content_html": "<h2 id=\"一-搭建layeairbox开发环境\"><a class=\"anchor\" href=\"#一-搭建layeairbox开发环境\">#</a> 一、搭建 LayeAirBox 开发环境</h2>\n<h3 id=\"11-安装nodejs环境\"><a class=\"anchor\" href=\"#11-安装nodejs环境\">#</a> 1.1 \t安装 Node.js 环境</h3>\n<ul>\n<li>\n<p>win7 的系统，那么最高支持的 node.js 的版本是 13.14 及以下的版本</p>\n</li>\n<li>\n<p>win10 系统，下最新版的 (LTS 版的最好) 版本就行</p>\n</li>\n</ul>\n<h3 id=\"12-安装命令\"><a class=\"anchor\" href=\"#12-安装命令\">#</a> 1.2 \t安装命令</h3>\n<ul>\n<li>检查是不是安装过 node.js 了，如果安装了，出现了 npm 的命令说明，版本号和安装路径，那就跳过这一步</li>\n<li>没安装，贴上地址 https://nodejs.org/en/，安装完之后再使用下面的命令来检查是否安装成功</li>\n</ul>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm <span class=\"token function\">-</span>h</pre></td></tr></table></figure><p><img data-src=\"https://s2.loli.net/2022/07/19/8nKCG9q6Vxd5zPg.png\" alt=\"image-20220719104519551\" /></p>\n<h3 id=\"13npm命令来安装typescript环境\"><a class=\"anchor\" href=\"#13npm命令来安装typescript环境\">#</a> 1.3\tnpm 命令来安装 TypeScript 环境</h3>\n<ul>\n<li>在命令行输入下面指令，按回车键，即可下载并安装</li>\n</ul>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token function\">-</span>g typescript</pre></td></tr></table></figure><ul>\n<li>如果遇到和下图相似的错误，那就执行一下缓存清理命令（我没出现过）</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/07/19/pKIBQmkde5CzbvS.png\" alt=\"image-20220719153348983\" /></p>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm cache clean <span class=\"token function\">-</span><span class=\"token function\">-</span>force</pre></td></tr></table></figure><ul>\n<li>安装成功以后使用下面命令，如果出现类似下图的 TypeScript 的版本信息表示安装完成</li>\n</ul>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tsc <span class=\"token function\">-</span>v</pre></td></tr></table></figure><p><img data-src=\"https://s2.loli.net/2022/07/19/ubnX4cOMlhNSz6T.png\" alt=\"image-20220719153705149\" /></p>\n<hr />\n<h2 id=\"二-layaair示例项目源码编译运行指南\"><a class=\"anchor\" href=\"#二-layaair示例项目源码编译运行指南\">#</a> 二、LayaAir 示例项目源码编译运行指南</h2>\n<h3 id=\"21安装git环境\"><a class=\"anchor\" href=\"#21安装git环境\">#</a> 2.1\t安装 git 环境</h3>\n<ul>\n<li>度娘搜一下安装教程（这里就不再赘述了）</li>\n</ul>\n<h3 id=\"22克隆layaair源码项目到本地\"><a class=\"anchor\" href=\"#22克隆layaair源码项目到本地\">#</a> 2.2\t克隆 LayaAir 源码项目到本地</h3>\n<ul>\n<li>在自己想要放的盘符建一个空文件夹（绝对路径不要包含中文）</li>\n<li>然后在你创建的目录下面右键，如下图打开命令行输入下面命令，就可以下载了（不过比较的慢，国内嘛）</li>\n</ul>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https<span class=\"token dfn builtin\">:</span><span class=\"token monadic-operator operator\">/</span><span class=\"token monadic-operator operator\">/</span>github<span class=\"token dyadic-operator operator\">.</span>com<span class=\"token monadic-operator operator\">/</span>layabox<span class=\"token monadic-operator operator\">/</span>LayaAir<span class=\"token dyadic-operator operator\">.</span>git</pre></td></tr></table></figure><p><img data-src=\"https://s2.loli.net/2022/07/19/hcKnN5ZGF98RPkJ.png\" alt=\"image-20220719154624180\" /></p>\n<h3 id=\"23安装源码依赖包\"><a class=\"anchor\" href=\"#23安装源码依赖包\">#</a> 2.3\t安装源码依赖包</h3>\n<ul>\n<li>在刚才拉完源码的目录下打开命令行</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/07/19/MR5hSlb74ftGgDs.png\" alt=\"image-20220719154909858\" /></p>\n<ul>\n<li>然后在命令行中输入下面的命令，如果有警告，可以忽略</li>\n</ul>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install</pre></td></tr></table></figure><h3 id=\"24运行layaair引擎示例代码\"><a class=\"anchor\" href=\"#24运行layaair引擎示例代码\">#</a> 2.4\t运行 LayaAir 引擎示例代码</h3>\n<ul>\n<li>官方文档里面用 vscode 打开后，运行<strong> Ctrl + Shift + B</strong>，然后如下图，所示，先构建配置文件，然后在编译源码</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/07/19/Lbdxs6uPqpMk38y.png\" alt=\"image-20220719155421094\" /></p>\n<ul>\n<li>如果在点了第二步之后，报错 gulp 不是内部命令，和 2.3 安装依赖包的操作一样，输入下面命令，这样这个命令就添加了（如果还是报错，再执行一下，第二句命令）</li>\n</ul>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token function\">-</span>g gulp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install</pre></td></tr></table></figure><ul>\n<li>如果上两步都 OK 了，然后在 vscode 中 F5 运行，当走到要执行 anywhere 时报错，那么就是因为没有安装 anywhere 依赖，2.3 安装依赖包的操作一样输入下面命令，安装完之后再编译一遍，那么浏览器就会出现下面的页面，打开 indexTSC.html 就可以看到示例项目了</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2022/07/19/kpS9iRLXt3f62cH.png\" alt=\"image-20220719160502902\" /></p>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token function\">-</span>g anywhere</pre></td></tr></table></figure><p><img data-src=\"https://s2.loli.net/2022/07/19/vJyIebANMPGYaKB.png\" alt=\"image-20220719160401070\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/07/19/s8zqatbkGJ2SOLh.png\" alt=\"image-20220719160603343\" /></p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "url": "http://example.com/2022/07/19/TypeScript/TypeScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "title": "TypeScript基础语法",
            "date_published": "2022-07-18T16:00:00.000Z",
            "content_html": "<h2 id=\"typescript-基础语法\"><a class=\"anchor\" href=\"#typescript-基础语法\">#</a> TypeScript 基础语法</h2>\n<ul>\n<li>TS（TypeScript 的简称，以下的文章都是用缩写）程序由 5 个部分组成：</li>\n</ul>\n<ol>\n<li>模块</li>\n<li>函数</li>\n<li>变量</li>\n<li>语句表达式</li>\n<li>注释</li>\n</ol>\n<h3 id=\"11-类\"><a class=\"anchor\" href=\"#11-类\">#</a> 1.1 \t类</h3>\n<p>类是一个模板，它描述一类对象的行为和状态，如果学习过 c# 的同学应该理解起来比较的熟悉</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fun</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//name：方法名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// :void 无返回值方法（这一部分，当看完 TS 中的基本数据类型的时候在继续深入研究）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//value: 实参（这里有别于 c#, 类似于 lua，不需要管传进来的数据是什么类型的，这一部分暂时不深究，后面学到了在继续的深入理解）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">name</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的值大于1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的值小于等于1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// &lt;&lt;  输入的值大于 1</span></pre></td></tr></table></figure>",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%B8%80%EF%BC%89/",
            "url": "http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%B8%80%EF%BC%89/",
            "title": "UnityShader入门精要（渲染流水线 一）",
            "date_published": "2022-05-16T16:00:00.000Z",
            "content_html": "<h2 id=\"unityshader入门精要渲染流水线-一\"><a class=\"anchor\" href=\"#unityshader入门精要渲染流水线-一\">#</a> UnityShader 入门精要（渲染流水线   一）</h2>\n<h3 id=\"渲染流水线\"><a class=\"anchor\" href=\"#渲染流水线\">#</a> 渲染流水线</h3>\n<p>​\t接着上回书说到，我根据《UnityShader 入门精要来》这本书来一步一步的学习，这个系列是记录我的学习过程，方便以后查阅，因为我有一个很大的 &quot;优点&quot;，就是很容易忘！</p>\n<p>​\t乐乐女神在开始就说了，&quot;没有了解渲染流水线的工作流程，就永远没法说自己入门&quot;，这句话我有很深刻的印象，因为在面试的过程中，面试官会问，什么是渲染流水线？如果回答上来，说明你入门了，可以继续交流，如果这个都没说上来，那就证明不熟悉渲染，只是了解，不过也不是绝对的，有些大佬除外。</p>\n<p>​\t渲染流水线是啥？包含了什么？以及这条工作流程最终的结果是啥</p>\n<h5 id=\"阐释\"><a class=\"anchor\" href=\"#阐释\">#</a> 阐释：</h5>\n<p>​\t渲染流水线的工作任务在于一个三维场景的触发，计算机需要从一系列的顶点数据，纹理等信息出发，然后又 CPU 和 GPU 来共同完成的</p>\n<p>​\t上面说的很笼统，那就细分一下，将渲染分为三个阶段：</p>\n<p>​\t应用阶段 --&gt; 几何阶段 --&gt; 光栅化阶段</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMTEvMjIvN1JOWXV2VEJEZTRPQWhKLnBuZw==\">https://i.loli.net/2021/11/22/7RNYuvTBDe4OAhJ.png</span>&quot; alt=&quot;image-20211122194636560&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<h5 id=\"三个阶段\"><a class=\"anchor\" href=\"#三个阶段\">#</a> 三个阶段</h5>\n<h6 id=\"应用阶段\"><a class=\"anchor\" href=\"#应用阶段\">#</a> 应用阶段：</h6>\n<p>​\t\t这个阶段是有我们的应用主导的，一般是 CPU 来负责的，对于这部分的内容有绝对的控制，或者说是可编程可开发的阶段，这个阶段有<strong>三个主要的任务</strong></p>\n<ol>\n<li>\n<p>准备好场景数据，比如摄像机的位置，视椎体（如果学过 Unity 的码友，这个其实就是场景摄像机可以渲染的范围，如下图所示，我画的是一个平面的，在 Unity 中是一个梯形立方体形状），还有场景中包含的模型数据（顶点信息，法线的方向，顶点的颜色，纹理坐标），光源等</p>\n<p><img data-src=\"https://i.loli.net/2021/11/22/vmGtgC1xspbL4BF.png\" alt=\"image-20211122200532800\" /></p>\n</li>\n<li>\n<p>粗粒度剔除（先不要纠结，知道有这一步就好，其实简单理解就是粗略的筛选，将不需要的信息和不可见的物体剔除）</p>\n</li>\n<li>\n<p>设置<strong>每个模型</strong>的<strong>渲染状态</strong>，这些渲染的状态包括但不限于它使用的材质（漫反射，高光反射颜色），使用的纹理，使用的 shader 等，这里最最最重要的就是输出<strong>渲染所需的几何信息</strong>，<strong>渲染图元</strong>，渲染图元可以是点，可以是线，也可以是三角面等。然后将这些渲染图元传递给下一个工作流水线 ---------- 几何阶段。</p>\n</li>\n</ol>\n<h6 id=\"几何阶段\"><a class=\"anchor\" href=\"#几何阶段\">#</a> 几何阶段：</h6>\n<p>​\t\t几何阶段处理我们要绘制的几何相关的工作，例如，需要绘制的图元是什么，怎样绘制他们？ 在哪儿绘制？<br />\n​\t这一个阶段通常是在 GPU 上进行的。<br />\n​\t\t几何阶段负责和每一个图元打交道，进行<strong>逐顶点，逐多边形的操作</strong>，这个阶段可以分为更小的流水线，几何阶段还有一个很重要的任务就是把<strong>顶点坐标变化到屏幕空间中</strong>，再交给光栅器处理就。对输入的<strong>渲染图元</strong>进行多歩拆解处理，然后将会输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等相关的信息，传递给光栅化阶段。</p>\n<h6 id=\"光栅化阶段\"><a class=\"anchor\" href=\"#光栅化阶段\">#</a> 光栅化阶段：</h6>\n<p>​\t\t这一阶段将会使用几何阶段传递的数据产生屏幕上的像素，渲染出最终的图像，这一阶段也是在 GPU 上进行的，光栅化的任务就是决定每个<strong>渲染图元</strong>中的那些像素被绘制到屏幕上来，它需要对几何阶段得到的<strong>逐顶点数据</strong>（如纹理坐标，顶点颜色等）插值，然后<strong>逐像素</strong>处理。</p>\n<h6 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h6>\n<p>​\t\t其实这三个流水线是让我们在学习或者是认识流水线的时候划分的三个阶段，每一个阶段中间还有很多小的流水线，明天的章节中，是 GPU 真正实现上述概念的流水线。</p>\n<h6 id=\"茶后杂谈\"><a class=\"anchor\" href=\"#茶后杂谈\">#</a> 茶后杂谈：</h6>\n<p>​\t\t其实之前有学过一段时间，但是晒网了，没有继续保持，导致自己迷茫了很长一段时间，现在准备从最基础开始一步一步的向前走，将基础走牢固，切记不可眼高手低，哪怕是很小的知识点，也需要去记忆巩固，走好每一步，永远相信自己，这个系列我会一直更新，每天学一点，，不为别的，只为自己更新。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%BA%8C%EF%BC%89/",
            "url": "http://example.com/2022/05/17/UnityShader/UnityShader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%EF%BC%88%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%20%E4%BA%8C%EF%BC%89/",
            "title": "UnityShader入门精要（渲染流水线 二）",
            "date_published": "2022-05-16T16:00:00.000Z",
            "content_html": "<h2 id=\"unityshader入门精要渲染流水线-二\"><a class=\"anchor\" href=\"#unityshader入门精要渲染流水线-二\">#</a> UnityShader 入门精要（渲染流水线   二）</h2>\n<h3 id=\"渲染流水线之cpu\"><a class=\"anchor\" href=\"#渲染流水线之cpu\">#</a> 渲染流水线之 CPU</h3>\n<p>​\t\t我根据《UnityShader 入门精要来》这本书来一步一步的学习，这个系列是记录我的学习过程，方便以后查阅，因为我有一个很大的 &quot;优点&quot;，就是很容易忘！</p>\n<p>​\t\t乐乐女神在开始就说了，&quot;没有了解渲染流水线的工作流程，就永远没法说自己入门&quot;，这句话我有很深刻的印象，因为在面试的过程中，面试官会问，什么是渲染流水线？如果回答上来，说明你入门了，可以继续交流，如果这个都没说上来，那就证明不熟悉渲染，只是了解，不过也不是绝对的，有些大佬除外。</p>\n<p>​\t\t渲染流水线是啥？包含了什么？以及这条工作流程最终的结果是啥</p>\n<h5 id=\"cup和gpu之间的通信\"><a class=\"anchor\" href=\"#cup和gpu之间的通信\">#</a> CUP 和 GPU 之间的通信：</h5>\n<p>​\t\t今天来学习学习新的东西 CPU 和 GPU 之间的通信，昨天我们了解到渲染流水线的起点，也就是完全可以控制的应用阶段，应用阶段分为下面三个小阶段：</p>\n<ul>\n<li>把数据加载到显存中</li>\n<li>设置渲染状态</li>\n<li>调用 DrawCall（俗称 DC）</li>\n</ul>\n<p>​     那先说说第一个阶段，将数据加载到显存中</p>\n<h6 id=\"数据加载到显存\"><a class=\"anchor\" href=\"#数据加载到显存\">#</a> 数据加载到显存：</h6>\n<p>​\t\t所有的渲染数据都需要从硬盘中加载到系统内存中，然后操作内存中的数据加载到显卡的显存中，因为显卡对于显存的访问便利程度远远大于内存（访问便利程度就是指访问速度和访问的权限，因为大多数显卡没有直接访问内存的权限）</p>\n<p>如下图所示：渲染所需的数据（两张纹理以及三个网格）从硬盘加载到显存中的流程，这样在渲染时，显卡可以直接很快的去访问显卡中存储的数据来进行渲染。</p>\n<p><img data-src=\"https://i.loli.net/2021/11/23/rzfYBNC9K8cQIXs.png\" alt=\"image-20211123210320124\" /></p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>需要注意：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>真实渲染的过程更加的复杂，这里只是将流程简单的梳理出来；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>例如，顶点的位置信息，法线的方向，顶点的颜色，纹理坐标等</pre></td></tr></table></figure><p>​\t\t当把数据加载到显存中后，内存中的数据就可以移除了；但是对于一些数据来说，是 CPU 所需要的，CPU 仍然需要访问他们（例如，希望 CPU 可以访问网格数据来进行碰撞检测），那这些就是需要的数据。不希望移除，因为从硬盘加载到内存的过程十分的耗时。</p>\n<p>数据加载准备完毕以后，接下来就可以通过 CPU 设置渲染状态，来指导 GPU 进行渲染工作。</p>\n<h6 id=\"设置渲染状态\"><a class=\"anchor\" href=\"#设置渲染状态\">#</a> 设置渲染状态：</h6>\n<p>​\t\t啥是渲染状态 ¿ 通俗的说就是，这些个状态定义了场景中的网格是怎么被渲染出来的，例如：使用了那个顶点着色器或者是片元着色器，光源的属性，材质等，如果没有更改渲染状态，那么所有网格就是一个渲染的状态，下图使用一种渲染状态渲染三个不同网格的结果，由于没有改变 3 个网格的外观，所以看起来是同一个材质的物体</p>\n<p><img data-src=\"https://i.loli.net/2021/11/23/Tq3rfEd2MvU4l9W.png\" alt=\"image-20211123210358539\" /></p>\n<p>​\t\t在准备好所有的工作后，CPU 就需要调用一个渲染命令（DrawCall）来告诉 GPU，数据准备 ok，可以按照设置的指令来开始渲染了</p>\n<h6 id=\"调用drawcall\"><a class=\"anchor\" href=\"#调用drawcall\">#</a> 调用 DrawCall：</h6>\n<p>​\t\t实际上 DrawCall 就是一个指令，CPU ——&gt;GPU，这个命令仅仅会指向一个需要被渲染的<strong>图元列表</strong>，而不会再包含任何材质信息。如下图所示，CPU 告诉 GPU 开始进行渲染，<strong>一个 DrawCall 会指向本次调用需要渲染的图元列表</strong>。</p>\n<p><img data-src=\"https://i.loli.net/2021/11/23/T1OhgbvIre7PMmc.png\" alt=\"image-20211123211041976\" /></p>\n<p>​\t\t当给定一个 DrwaCall 时，GPU 就会根据渲染状态（如，材质，纹理，shader 等）和所输入的顶点数据来进行计算，最终输出成屏幕上显示的漂漂亮亮的像素。</p>\n<h6 id=\"茶后杂谈\"><a class=\"anchor\" href=\"#茶后杂谈\">#</a> 茶后杂谈：</h6>\n<p>​\t\t今天是第二天学习 shader，坚持下去，一定会有收获！不求学太多，每天进步一点。</p>\n",
            "tags": [
                "教程"
            ]
        }
    ]
}